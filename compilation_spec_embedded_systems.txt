Transducers & 
Sensors I
Cyrel Ontimare Manlises
Transducers & Sensors
BASIC SENSORS AND PRINCIPLES
SOURCE: https://slideplayer.com/slide/9343197/
Transducers & Sensors
TRANSDUCER SYSTEMS
SENSORS
ACTUATORS
POWER 
SUPPLY
INTERFACE 
CIRCUITS
CONTROL 
AND 
PROCESSING 
CIRCUITS
I/O CHANNEL/USER
SOURCE: https://slideplayer.com/slide/9343197/
Transducers & Sensors
TRANSDUCER
A device that converts a primary form of energy into  corresponding signal with a different energy 
form. It is also defined as a device which provides usable output response to a specific input 
measured which may be a physical quantity.  It is capable of converting the physical quantity into a 
proportional quantity such as voltage or current. And when actuated by energy in one system, it is a 
device that supplies energy in the same form or in another form to a second system.
Primary energy forms: 
✓
Mechanical
✓
Thermal
✓
Electromagnetic
✓
Optical
✓
Chemical
✓
Etc.
Transducers & Sensors
BLOCK DIAGRAM OF TRANSDUCERS
✓Transducers contains two parts that are closely related to each other
✓Sensing element
✓Transduction element
✓SENSOR is the sensing element or a device that produces measurable response to change in 
physical conditions.
✓TRANSDUCTION ELEMENT convert the sensor output to suitable electrical form
PARAMETER
e.g. pressure, 
temperature, force
SENSING 
ELEMENT
TRANSDUCTION 
ELEMENT
SENSOR OUTPUT
ELECTRICAL 
SIGNAL
SOURCE: https://slideplayer.com/slide/9343197/
ADVTANTAGES OF ELECTRICAL TRANSDUCERS
✓Power requirement is very low for controlling the electrical or electronic 
system
✓An amplifier may be used to amplify the electrical signal according to 
requirement
✓Friction effect is minimized
✓Mass-inertia is also minimized, because in case of electrical or electronics 
signals the intertia effect is due to the mass of electrons, which can be 
negligible
✓Output can be indicated and recorded remotely from the sensing element 
Transducers & Sensors
CHARACTERISTICS OF TRANSDUCERS
✓Ruggedness
✓Linearity
✓Repeatability
✓Accuracy
✓High stability and reliability
✓Speed of response
✓Sensitivity
✓Small size
Transducers & Sensors
TRANSDUCERS SELECTION FACTORS
1.
OPERATING PRINCIPLE The transducer are many times selected on the basis of operating principle 
used by them. The operating principle used may be resistive, inductive, capacitive, optoelectronic, piezo 
electric, and etc.
2.
SENSITIVITY The transducer must be sensitive enough to produce detectable output
3.
OPERATING RANGE The transducer should maintain the range requirement and have a good resolution 
over the entire range
4.
ACCURACY High accuracy is assured 
5.
CROSS SENSITIVITY It has to be taken into account when measuring mechanical quantities. There are 
situation where the actual quantity is being measured is in one plane and the transducer is subjected to 
variation in another plan
6.
ERRORS The transducer should maintain the expected input-output relationship as described by the 
transfer function so as to avoid errors.
Transducers & Sensors
TRANSDUCERS SELECTION FACTORS
7.
TRANSIENT AND FREQUENCY RESPONSE The transducer should meet the desired time 
domain specification like peak overshoot, rise time, setting time and small dynamic error.
8.
LOADING EFFECTS The transducer should have a high input impedance and low output impedance to 
avoid loading effects.
9.
ENVIRONMENTAL COMPATIBILITY It should be assured that the transducer selected to work 
under specified environmental conditions maintains its input-output relationship and does not break down.
10. INSENSITIVITY TO UNWANTED SIGNALS The transducer should be minimally sensitive to 
unwanted signals and highly sensitive to desired signals.
Transducers & Sensors
Transducers & Sensors
CLASSIFICATION OF TRANSDUCERS
Transducers ma be classified according to their application, method of energy conversion, or nature of the output signal.
CAPACITIVE
TRANSDUCERS
ON THE BASIS 
OF PRINCIPLES 
USED
ACTIVE/PASSIVE
PRIMARY/
SECONDARY
ANALOG/
DIGITAL
TRANSDUCERS
/INVERSE 
TRANSDUCERS
INDUCTIVE
RESISTIVE
SOURCE: https://slideplayer.com/slide/9343197/
TRANSDUCERS CAN BE CLASSIFIED AS:
➢Active and passive transducers
➢Analog and digital transducers
➢On the basis of transduction principle used
➢Primary and secondary transducer
➢Transducers and inverse transducer
Transducers & Sensors
ACTIVE AND PASSIVE TRANSDUCERS
ACTIVE TRANSDUCERS
These transducers do not need any external source of power for their operation. Therefore they are also called as self 
generating type of transducers.
I.
The active transducer are self generating devices which operate under the energy conversion principle.
II.
As the output of active transducers we get an equivalent electrical output signal.
 
e.g. Temperature or strain to electric potential without any external source of energy being used
PIEZOELECTRIC 
TRANSDUCER
ACTIVE TRANSDUCERS
PHOTO 
VOLTAIC
THERMO 
ELECTRIC
ELECTROMAGENTIC
PEIZO
ELECTRIC
CHEMICAL
OTHERS
SOURCE: https://slideplayer.com/slide/9343197/
Transducers & Sensors
ACTIVE AND PASSIVE TRANSDUCERS
PASSIVE TRANSDUCER
I.
These transducers need external source of power 
for their operation. So they are not self generating 
type transducers. 
II.
A  DC power supply or an audio frequency 
generator is used as an external power source.
III. These transducers produce the output signal in the 
form of variation in resistance, capacitance, 
inductance or some other electrical parameter in 
response to the quantity to be measured.
Transducers & Sensors
CLASSIFICATION OF PASSIVE TRANSDUCERS
Transducers & Sensors
PRIMARY AND SECONDARY TRANSDUCERS
• Some transducers contain the mechanical as well as electrical 
device. The mechanical device converts the physical quantity 
to be measured into a mechanical signal. Such mechanical 
device are called as the primary transducers, because they deal 
with the physical quantity to be measured.
•The electrical device then convert this mechanical signal into 
a corresponding electrical signal. Such electrical device are 
known as secondary transducers.
Transducers & Sensors
According to Transduction Principle 
Transducers & Sensors
CAPACITIVE TRANSDUCER:
•In capacitive transduction transducers the measurand is converted to a 
change in the capacitance.
• A typical capacitor is comprised of two parallel plates of conducting 
material separated by an electrical insulating material called a dielectric. The 
plates and the dielectric may be either flattened or rolled.
• The purpose of the dielectric is to help the two parallel plates maintain 
their stored electrical charges.
• The relationship between the capacitance and the size of capacitor plate, 
amount of plate separation, and the dielectric is given by
C  = ε0 εr A / d
d is the separation distance of plates (m)
C is the capacitance (F, Farad)
ε0 : absolute permittivity of vacuum
εr : relative permittivity
A is the effective (overlapping) area of capacitor plates (m2)
According to Transduction Principle 
d  
Area=A  
Either A, d or ε can be varied.
Transducers & Sensors
ELECTROMAGNETIC TRANSDUCTION:
•In electromagnetic transduction, the measurand is converted to 
voltage induced in conductor by change in the magnetic flux, in 
absence of excitation.
•The electromagnetic transducer are self generating active transducers
•The motion between a piece of magnet and an electromagnet is 
responsible for the change in flux
According to Transduction Principle 
Transducers & Sensors
INDUCTIVE TRANSDUCER:
•In inductive transduction, the measurand is converted 
into a change in the self inductance of a single coil. It is 
achieved by displacing the core of the coil that is 
attached to a mechanical sensing element
According to Transduction Principle 
Transducers & Sensors
PIEZO ELECTRIC INDUCTION :
•In piezoelectric induction the measurand is 
converted into a change in electrostatic charge 
q or voltage V generated by crystals when 
mechanically it is stressed as shown in fig.
According to Transduction Principle 
Transducers & Sensors
PHOTOVOLTAIC TRANSDUCTION :
•In photovoltaic transduction the measurand is converted to 
voltage generated when the junction between dissimilar material 
is illuminated as shown in fig.
According to Transduction Principle 
Transducers & Sensors
n-type 
semiconductor
p-type 
semiconductor
+   +   +   +    +   +   +   +   +   +   +   +   +   +  +  
-  -   -    -   -   -   -   -   -   -   -   -   -   -   -   -   -   -  
Physics of Photovoltaic Generation
Depletion Zone
Transducers & Sensors
PHOTO CONDUCTIVE TRANSDUCTION :
•In photoconductive transduction the measurand is 
converted to change in resistance of semiconductor 
material by the change in light incident on the material.
According to Transduction Principle 
Transducers & Sensors
Transducer and Inverse Transducer
TRANSDUCER:
•Transducers convert non electrical quantity to 
electrical quantity.
 INVERSE TRANSDUCER:
• Inverse transducers convert electrical quantity to a 
non electrical quantity
Transducers & Sensors
PASSIVE TRANSDUCERS
•Resistive transducers :
–Resistive transducers are those transducers in which the 
resistance change due to the change in some physical 
phenomenon.
–The resistance of a metal conductor is expressed by a simple 
equation. 
–R = ρL/A
–Where R = resistance of conductor in Ω
                L = length of conductor in m
                A = cross sectional area of conductor in m2
                  ρ = resistivity of conductor material in Ω-m.
Transducers & Sensors
There are 4 type of resistive transducers.
1. Potentiometers (POT)
2. Strain gauge 
3. Thermistors 
4. Resistance thermometer 
RESISTIVE TRANSDUCERS
Transducers & Sensors
POTENTIOMETER
•The potentiometer are used for voltage division. They consist of 
a resistive element provided with a sliding contact. The sliding 
contact is called as wiper.
•The contact motion may be linear or rotational or combination of 
the two. The combinational potentiometer have their resistive 
element in helix form and are called helipots.
•Fig shows a linear pot and a rotary pot.
Transducers & Sensors
STRAIN GAUGE
The strain gauge is a passive, resistive transducer which converts 
the mechanical elongation and compression into a resistance 
change.
This change in resistance takes place due to variation in length 
and cross sectional area of the gauge wire, when an external force 
acts on it.
Transducers & Sensors
Devices designed to exhibit a change in resistance as a result of experiencing strain to 
measure displacement in the order of nanometer.
A
L
R

=
For a simple wire:
(
)
L
L
L
L
R
R
G
/
/
2
1
/
/


+
+
=


=



A change in R will result from a change in   (resistively), or a change in L or A 
(dimension).
The gauge factor, G, is used to compare various strain-gauge materials
 Is Poisson’s ratio   
 
 
for most metals =0.3 
L
L
D
D
/
/


−
=
Semiconductor has larger G but more sensitive to temperature 
Transducers & Sensors
TYPES OF STRAIN GAUGE
The type of strain gauge are as
1. Wire gauge 
a) Unbonded 
b) Bonded 
c) Foil type 
2. Semiconductor gauge 
Transducers & SensorsC
UNBONDED STRAIN GAUGE
An unbonded meter strain gauge is shown in fig
This gauge consist of a wire stretched between two point in an 
insulating medium such as air. The wires may be made of various 
copper, nickel, crome nickle or nickle iron alloys.
In fig the element is connected via a rod to diaphragm which is 
used for sensing the pressure. The wire are tensioned to avoid 
buckling when they experience the compressive force.
The unbounded meter wire gauges 
used almost exclusively in transducer 
application employ preloaded 
resistance wire connected in 
Wheatstone bridge as shown in fig.
At initial preload the strain and 
resistance of the four arms are 
nominally equal with the result the 
output voltage of the bridge is equal 
to zero.
Application of pressure produces a 
small displacement , the displacement 
increases a tension in two wire and 
decreases it in the other two thereby 
increase the resistance of two wire 
which are in tension and decreasing 
the resistance of the remaining two 
wire .
This causes an unbalance of the 
bridge producing an output voltage 
which is proportional to the input 
displacement and hence to the applied 
pressure .
Transducers & Sensors
BONDED STRAIN GAUGE
The bonded metal wire strain gauge are 
used for both stress analysis and for 
construction of transducer.
A resistance wire strain gauge consist of a 
grid of fine resistance wire. The grid is 
cemented to carrier which may be a thin 
sheet of paper bakelite or teflon.
The wire is covered on top with a thin 
sheet of material so as to prevent it from 
any mechanical demage.
The carrier is bonded with an adhesive 
material to the specimen which permit a 
good transfer of strain from carrier to grid 
of wires.
Transducers & Sensors
BONDED METAL FOIL STRAIN GAUGE
It consist of following parts:
1.Base (carrier) Materials: several types of 
base material are used to support the wires. 
Impregnated paper is used for room temp. 
applications. 
2.Adhesive: The adhesive acts as bonding 
materials. Like other bonding operation, 
successful starain gauge bonding depends upon 
careful surface preparation and use of the 
correct bonding agent.
          In order that the strain be faithfully 
transferred on to the strain gauge, the bond has 
to be formed between the surface to be strained 
and the plastic backing material on which the 
gauge is mounted .
Transducers & Sensors
It is important that the adhesive should be 
suited to this backing and adhesive 
material should be quick drying type and 
also insensitive to moisture.
3.
Leads: The leads should be of such 
materials which have low and stable 
resistivity and also a low resistance 
temperature coefficent
✓
This class of strain gauge is only an 
extension of the bonded metal wire strain 
gauges.
✓
The bonded metal wire starin gauge have 
been completely superseded by bonded 
metal foil strain gauges.
✓
Metal foil strain gauge use identical 
material to wire strain gauge and are used 
for most general purpose stress analysis 
application and for many transducers.
Transducers & Sensors
Transducers & Sensors
SEMICONDUCTOR GAUGE
Semiconductor gauge are used in 
application where a high gauge factor is 
desired. A high gauge factor means 
relatively higher change in resistance that 
can be measured with good accuracy.
The resistance of the semiconductor gauge 
change as strain is applied to it. The 
semiconductor gauge depends for their 
action upon the piezo-resistive effect i.e. 
change in value of resistance due to 
change in resistivity.
Silicon and germanium are used as 
resistive material for semiconductor 
gauges.
Resistance of  metal increase with 
increases in temperature. Therefore 
metals are said to have a positive 
temperature coefficient of resistivity.
Fig shows the simplest type of open 
wire construction of platinum 
résistance thermometer. The 
platinum wire is wound in the form 
of spirals on an insulating material 
such as mica or ceramic.
This assembly is then placed at the 
tip of probe 
This wire is in direct contact with 
the gas or liquid whose temperature 
is to be measured.
RESISTANCE THERMOMETER
Transducers & Sensors
The resistance of the platinum wire changes with the 
change in temperature of the gas or liquid
This type of sensor have a positive temperature 
coefficient of resistivity as they are made from metals 
they are also known as resistance temperature detector
Resistance thermometer are generally of probe type for 
immersion in medium whose temperature is to be 
measured or controlled.
Transducers & Sensors
THERMISTOR
•Thermistor is a contraction of a term “thermal resistor”.
•Thermistor are temperature dependent resistors. They are 
made of semiconductor material which have negative 
temperature coefficient of resistivity i.e. their resistance 
decreases with increase of temperature.
•Thermistor are widely used in application which involve 
measurement in the range of 0-60º Thermistor are composed 
of sintered mixture of metallic oxides such as magnese, 
nickle, cobalt, copper, iron and uranium
Transducers & Sensors
•The thermistor may be in the form of beads, rods and 
discs.
•The thermistor provide a large change in resistance for 
small change in temperature. In some cases the 
resistance of thermistor at room temperature may 
decreases as much as 6% for each 1ºC rise in 
temperature.
Transducers & Sensors
Thermocouples
See back Effect
When a pair of dissimilar metals are joined at one end, and there is a 
temperature difference between the joined ends and the open ends, 
thermal emf is generated, which can be measured in the open ends.
This forms the basis of thermocouples.
Transducers & Sensors
VARIABLE-INDUCTANCE TRANSDUCERS
• An inductive electromechanical transducer is 
a transducer which converts the physical 
motion into the change in inductance.
• Inductive transducers are mainly used for 
displacement measurement.
Transducers & Sensors
The inductive transducers are of the self generating or 
the passive type. The self generating inductive 
transducers use the basic generator principle i.e. the 
motion between a conductor and magnetic field 
induces a voltage in the conductor.
The variable inductance transducers work on the 
following principles.
Variation in self inductance
Variation in mutual inductance
Transducers & Sensors
Transducers & 
Sensors II
Cyrel Ontimare Manlises
Transducers & Sensors
SENSORS
SOURCE: https://web.itu.edu.tr/~yalcinme/files/courses/MMG/ch2_1%20Sensors%20and%20transducers.pdf
Transducers & Sensors
SENSOR
It is a device that detects a change in a 
physical stimulus and turns it into a 
signal which can be measured or 
recorded.
Acquires information from the real 
world.
SOURCE: https://web.itu.edu.tr/~yalcinme/files/courses/MMG/ch2_1%20Sensors%20and%20transducers.pdf
Transducers & Sensors
SENSOR SYSTEMS
Convert desired parameter into electrically measurable signal.
General Sensor System:
1. Sensor/Transducer sense real world parameter and converted into a suitable signal
2. Signal Conditioning converts the sensed signal into an analog or digital electrical value
SOURCE: https://web.itu.edu.tr/~yalcinme/files/courses/MMG/ch2_1%20Sensors%20and%20transducers.pdf
Transducers & Sensors
DESIRABLE FEATURES OF SENSORS ARE:
✓
RANGE/SPAN
✓
ERRORS AND ACCURACY
✓
NONLINEARITY
✓
HYSTERESIS
✓
DEAD BAND AND SATURATION
✓
OUTPUT IMPEDANCE
✓
REPEATABILITY
✓
RELIABILITY
✓
SENSITIVITY
✓
RESOLUTION
✓
FREQUENCY RESPONSE
✓
RESPONSE TIME
✓
CALIBRATION
Transducers & Sensors
RANGE AND SPAN
✓RANGE lowest and highest values of the stimulus
✓SPAN the arithmetic difference between the highest and lowest values of the 
input that being sensed
✓INPUT FULL SCALE (IFS) is equal to SPAN
✓OUTPUT FULL SCALE (OFS) difference between the upper and lower ranges of 
the output of the sensor
✓DYNAMIC RANGE ratio between the upper and lower limits and is usually 
expressed in db
Transducers & Sensors
ERRORS AND ACCURACY
✓ERRORS is the difference between the result of the measurement and the 
true value of the quantity being measured
✓ACCURACY is the extent to which the measured value might be wrong and 
normally expressed in percentage
Error = measured value – true value
HYSTERESIS is the deviation of the sensor’s output at any given point when 
approached from two different directions
Caused by electrical or mechanical systems
✓Magnetization
✓Thermal properties
✓Loose linkages
Transducers & Sensors
Transducers & Sensors
NONLINEARITY is defined as the maximum 
deviation from the ideal linear transfer function
Nonlinearity must be deduced from the actual 
transfer function or from the calibration curve
A few methods to do so are:
✓
By use of the range of the sensor. Pass a straight line between 
the range points (line 1)
✓
Use a linear best fit (least square) through the points of curve 
(line 2)
✓
Use tangent to the curve at some point on the curve. Take a 
point in the middle of the range of interest. Draw the tangent 
and extend to the range of the curve (line 3)
SOURCE: https://web.itu.edu.tr/~yalcinme/files/courses/MMG/ch2_1%20Sensors%20and%20transducers.pdf
Transducers & Sensors
DEADBAND the lack of response or insensitivity of a device over a specific range 
of input
✓In this range which may be small, the output remains constant
✓A device should not operate in this range unless this insensitivity is acceptable
SOURCE: https://web.itu.edu.tr/~yalcinme/files/courses/MMG/ch2_1%20Sensors%20and%20transducers.pdf
Transducers & Sensors
OUTPUT IMPEDANCE ratio of the rated output voltage and short circuit current of 
the port 
e.g. current when the output is shorted
✓This is important for interfacing
REPEATABILITY/REPRODUCIBILITY failure of the sensor to represent the same 
value under identical conditions when measured at different times
✓Usually associated with calibration
✓Given as percentage of input full scale of the maximum difference between 
two readings taken at different times under identical input conditions
Repeatability = (max-min values given/full range) * 100
Transducers & Sensors
RELIABILITY a statistical measure quality of a device which indicates the ability of 
the device to perform its stated function, under normal operating conditions 
without failure for a stated period of time or number of cycles
✓Given in hours, years
✓Usually provided by the manufacturer
✓Based on accelerated lifetime testing
SENSITIVITY is defined as the change in output for a given change in input, usually 
a unit change in input
✓Sensitivity represents the slop of transfer function
✓It is also used to indicate sensitivity to other environment that is not measured
Transducers & Sensors
RESOLUTION  the minimum increment in stimulus to which the sensor can 
respond. It is the magnitude of the input change which results in the smallest 
observable output.
✓In digital systems generally, resolution may be specified as 1/2N (N is the 
number of bit)
FREQUENCY RESPONSE the ability of the device to respond to a harmonic 
(sinusoidal) input
✓A plot of magnitude ( power, displacement) as a function of frequency
✓Indicates the range of the stimulus in which the device is usable (sensors and 
actuators)
✓Provides important design parameters
✓Sometimes the phase is also given (the pair of plots is the Bode diagram of the 
the device)
Transducers & Sensors
FREQUENCY RESPONSE 
Important Design Parameters
✓Bandwidth (B-A, in Hz)
✓Flat frequency range (D-C, in Hz)
✓Cutoff frequencies (points A and B in Hz)
✓Resonant frequencies
SOURCE: https://web.itu.edu.tr/~yalcinme/files/courses/MMG/ch2_1%20Sensors%20and%20transducers.pdf
Transducers & Sensors
FREQUENCY RESPONSE 
Important Design Parameters
✓Bandwidth (B-A, in Hz): 16.5 kHz – 70 Hz = 16.43 kHz
✓Flat frequency range (D-C, in Hz): 10 kHz-120 kHz = 9880 Hz
✓Cutoff frequencies (points A and B in Hz):70 Hz and 16.5 Hz
✓Resonant frequencies :12 kHz
SOURCE: https://web.itu.edu.tr/~yalcinme/files/courses/MMG/ch2_1%20Sensors%20and%20transducers.pdf
Transducers & Sensors
RESPONSE TIME indicates the time needed for the output to reach steady state 
for a step change in input
✓Typically, the response time will be given as the time needed to reach 90% of 
steady state output upon exposure to a unit step change in input
✓The response time of the devise is due to the inertia of the device (both 
mechanical and electrical)
✓Fast response time is usually desirable
✓Slow response times tend to average readings
Transducers & Sensors
CALIBRATION the experimental determination of the transfer function of a sensor 
or actuator
✓Typically, needed when the transfer function is not known
✓When the device must be operated at tolerances below those specified by the 
manufacturer
✓Fast response time is usually desirable
✓Slow response times tend to average readings
✓Calibration is sometimes an operation requirement (thermocouples, pressure 
sensors)
✓Calibration data is usually supplied by the manufacturer
✓Calibration procedures must be included with the design documents
✓Errors due to calibration must be evaluated and specified
Transducers & Sensors
TWO METHODS
✓METHOD 1: KNOWN TRANSFER FUNCTION
1.
Determine the slope and crossing point (line function) from two known 
stimuli (say two temperatures) if the transfer function is linear
2.
Measure the output
3.
Calculate the slop and crossing point in V=aT+b
4.
If the function is more complex, need more points: V=aT+bT2+cT3+d
5.
4 measurements to calculate a, b, c, and d
6.
Must choose points effectively. If not, use equally spaced points or points 
around the locaitions of highest curvature
Transducers & Sensors
TWO METHODS
✓METHOD 2: UNKNOWN TRANSFER FUNCTION
1.
Measure the output Ri, as many input values Ti as is practical
2.
Use the entire span
3.
Calculate the best linear fit (least squares for example)
4.
If the curve is not linear, use polynomial fit
5.
May use piecewise linear segments if the number of points is large
Transducers & Sensors
DISPLACEMENT, POSITION, AND PROXIMITY SENSOR
✓DISPLACEMENT SENSORS are concerned with the measurement of amount by 
which some object has moved.
✓POSITION SENSORS are concerned with the determination of the position of 
some object with reference to some reference point
✓ PROXIMITY SENSORS are a form of position sensors. They are used to 
determine when an object has moved to within some particular critical 
distance of the sensor
When selecting sensors, consider the following:
1.
The size of displacement
2.
The required resolution and accuracy
3.
Nature of displacement
4.
The material of the measured object
Transducers & Sensors
CONTACT SENSORS
✓The movement of the sensor 
element is used to cause a 
change in electrical voltage, 
resistance, capacitance or 
mutual inductance
NON-CONTACT SENSORS
✓The presence in the vicinity of 
the measured object cause 
change in air pressure or 
change in inductance or 
capacitance
Transducers & Sensors
COMMONLY USED DISPLACEMENT SENSORS
✓POTENTIOMETER it consist of a constant resistance per unit length with sliding 
contact which can be moved over the length of the element. It can be used for 
linear or rotary displacements
✓With a constant source voltage Vs, the output voltage V0 is a fractional of 
the input voltage
𝑉0
𝑉𝑠
= 𝑅23
𝑅13
ROTARY POTENTIOMETER
✓The output voltage is 
proportional to the angle 
through which the slider has 
rotated, hence an angular 
displacement can be 
converted into a potential 
difference
SOURCE: https://web.itu.edu.tr/~yalcinme/files/courses/MMG/ch2_1%20Sensors%20and%20transducers.pdf
Transducers & Sensors
COMMONLY USED DISPLACEMENT SENSORS
✓POTENTIOMETER it is very importance to consider the effect of the load 
resistance RL connected across the output. 
✓The load voltage VL is only directly proportional to V0 if the load resistance is 
infinite
𝑡𝑜𝑡𝑎𝑙 𝑟𝑒𝑠𝑖𝑠𝑡𝑎𝑛𝑐𝑒= 𝑅𝑃(1 −𝑥) + 𝑅𝐿𝑥𝑅𝑃/(𝑅𝐿+ 𝑥𝑅𝑃)
𝑉𝐿
𝑉𝑆
=
𝑥𝑅𝐿𝑅𝑃/(𝑅𝐿+ 𝑥𝑅𝑃)
𝑅𝑃1 −𝑥+ 𝑥𝑅𝐿𝑅𝑃/(𝑅𝐿+ 𝑥𝑅𝑃)
𝑉𝐿
𝑉𝑆
=
𝑥
(𝑅𝑃/𝑅𝐿)𝑥(1 −𝑥) + 1
𝑒𝑟𝑟𝑜𝑟= 𝑥𝑉𝑆−𝑉𝐿= 𝑥𝑉𝑆−
𝑥𝑉𝑆
(𝑅𝑃/𝑅𝐿)𝑥(1 −𝑥) + 1 
𝑒𝑟𝑟𝑜𝑟= 𝑉𝑆
𝑅𝑃
𝑅𝐿
(𝑥2 −𝑥3) 
SOURCE: https://web.itu.edu.tr/~yalcinme/files/courses/MMG/ch2_1%20Sensors%20and%20transducers.pdf
Transducers & Sensors
COMMONLY USED DISPLACEMENT SENSORS
✓POTENTIOMETER
SAMPLE PROBLEM:
Assuming that the total potentiometer 
resistance is RP, find the error in the output 
reading in terms of x as suggested in the 
shown figure. And, if Vs=4V, RP=500Ω, and 
the slider is in the middle of the traveling 
range with a load resistance of 10kΩ. Find 
the value of the error (in volt)
SOLUTION:
𝑒𝑟𝑟𝑜𝑟= 4 500
10000 (0.52 −0.53 )
𝑒𝑟𝑟𝑜𝑟= 0.025𝑉
SOURCE: https://web.itu.edu.tr/~yalcinme/files/courses/MMG/ch2_1%20Sensors%20and%20transducers.pdf
Transducers & Sensors
COMMONLY USED DISPLACEMENT SENSORS
✓STRAIN GAUGE ELEMENT is a metal wire, metal foil or a strip of semiconductor 
material. These elements can be stuck onto surfaces like a postage stamp. 
When subjected to strain, its resistance R changes. The fractional change in 
resistance being proportional to the strain.
✓Strain is the ration of change in length/ original length
∆𝑅
𝑅= 𝐺∈
SOURCE: https://web.itu.edu.tr/~yalcinme/files/courses/MMG/ch2_1%20Sensors%20and%20transducers.pdf
Transducers & Sensors
COMMONLY USED DISPLACEMENT SENSORS
✓STRAIN GAUGE ELEMENT 
✓When the flexible element is bent or deformed as a result of forces being 
applied by a contact point being displaced, then the electrical resistance 
strain gauges mounted on the element are strained and so give a 
resistance change, which can be monitored. 
✓The change in resistance is thus a measure of the displacement or 
deformation of the flexible element.
SOURCE: https://web.itu.edu.tr/~yalcinme/files/courses/MMG/ch2_1%20Sensors%20and%20transducers.pdf
Transducers & Sensors
COMMONLY USED DISPLACEMENT SENSORS
✓CAPACITIVE 
1.
Since capacitance C of a parallel plate is given by 
𝐶=
∈𝑟∈0𝐴 
𝑑
 
2.     Capacitive sensors for monitoring of linear 
displacements might take the forms shown in (a) if d is 
changed by a displacement by a displacement x then 
capacitance is 
𝐶+ ∆𝐶= ∈𝑟∈0 𝐴
𝑑+ 𝑥
3.    The change in the capacitance value is nonlinear 
relationship
∆𝐶
𝐶=
𝑥/𝑑
1 + 𝑥/𝑑
SOURCE: https://web.itu.edu.tr/~yalcinme/files/courses/MMG/ch2_1%20Sensors%20and%20transducers.pdf
Transducers & Sensors
COMMONLY USED DISPLACEMENT SENSORS
✓CAPACITIVE The required resolution and accuracy
1.
This nonlinearity can be overcome by using a 
push-pull displacement sensor shown.
2.
The displacement moves the central plate 
between the two outer plates so if initially the 
distance between plate 1 and 2 equal the distance 
between plate 2 and 3, then C1=C2
3.
And, for small displacement x
𝐶1 = ∈𝑟∈0 𝐴
𝑑+ 𝑥
𝐶2 = ∈𝑟∈0 𝐴
𝑑−𝑥
SOURCE: https://web.itu.edu.tr/~yalcinme/files/courses/MMG/ch2_1%20Sensors%20and%20transducers.pdf
Embedded System 
Basics and 
Application
Cyrel Ontimare Manlises
• System
• Embedded System
• Components
• Classifications
• Processors
• Other Hardware
• Software
• Applications
SOURCE: https://www.electricaltechnology.org/2019/06/types-of-filters.html
What is a system?
• A system is a way of working, organizing or doing one or 
more many tasks according to a fixed plan, program or set 
of rules.
• A system is also an arrangement in which all its units 
assemble and work together according to the plan or 
program.
Embedded System
•
An embedded system is one that has computer hardware with software 
embedded in it as one of its important components.
•
Its software embeds in ROM (read only memory). It does not need 
secondary memories as in a computer.
Examples of Embedded System
Embedded System for a Car
Components of Embedded System
•
It has hardware
•
Processor, Timers, Interrupt controller, I/O Devices, Memories, Ports, etc.
•
It has main Application Software
•
Which may perform concurrently  the series of tasks or multiple tasks
•
It has Real Time Operating System (RTOS)
•
RTOS defines the way the system work. Which supervise the application 
software.
•
It sets the rules during the execution of the application program.
•
A small scale embedded system may not need an RTOS.
Features of an Embedded System
•
Single-functioned
•
Executes a single program, repeatedly
•
Tightly-Constrained
•
Low cost, low power, small, fast, etc.
•
Life threatening
•
24/7/365
•
Reactive and Real-Time
•
Continually reacts to changes in the system’s environment
•
Must compute certain results in real-time without delay
Future of Embedded System
•
Embedded processor account for 100% worldwide microprocessor production
•
Microprocessor Production
•
Embedded: Desktop=100:1
•
Embedded processors in a house (40-50) approx.
•
Embedded processors in a modern car 50-60
Languages for programming Embedded Systems
•
Assembly language was the pioneer for programming embedded system till 
recently
•
Nowadays, there are many more languages to program these systems. Some of 
the languages are C, C++, Ada, Forth, and Java together with its new 
enhancement J2ME.
•
The majority of the software for embedded system is still done in C language
•
Recent survey indicates that approximately 45% of the embedded software is 
still being done in C language
•
C++ is also increasing its presence in embedded systems. As C++ is based on C 
language, thus providing programmer the object oriented methodologies to 
reap the benefits of such approach. 
Languages for programming Embedded Systems
•
Assembly language was the pioneer for programming embedded system till 
recently
•
Nowadays, there are many more languages to program these systems. Some of 
the languages are C, C++, Ada, Forth, and Java together with its new 
enhancement J2ME.
•
The majority of the software for embedded system is still done in C language
•
Recent survey indicates that approximately 45% of the embedded software is 
still being done in C language
•
C++ is also increasing its presence in embedded systems. As C++ is based on C 
language, thus providing programmer the object oriented methodologies to 
reap the benefits of such approach. 
Languages for programming Embedded Systems
•
C is very close to assembly programming and it allows very easy access to 
underlying hardware.
•
A huge number of high quality compilers and debugging tools are available for 
the C language.
•
Though C++ is theoretically more efficient than C, but some of its compilers 
have bugs due to the huge size of the language.
•
These compilers may cause a buggy execution
Classifications of Embedded System
Real-Time Systems
•
Embedded systems in which some specific work has to be done in a specific 
time period are called real-time systems
•
Real-time embedded systems are classified into two types as soft and hard 
real-time systems
Stand Alone Embedded System
•
do not require a host system like a computer, it works by itself
•
It takes the input from the input ports either analog or digital and processes, 
calculates and converts the data and gives the resulting data through the 
connected device. Which either controls, drives and displays the connected 
devices.
•
Examples: mp3 players, digital cameras, video game consoles, microwave 
ovens and temperature measurement systems.
Network Embedded System
•
These types of embedded systems are related to a network to access the 
resources
•
The connected network can be LAN, WAN, or the internet
•
Example: home security system wherein all sensors are connected and run on 
the protocol TC/IP
Mobile Embedded System
•
Are used in portable embedded devices like cell phones, mobiles, digital 
cameras, mp3 players, and personal digital assistants, etc.
•
The basic limitation of these devices is the other resources and limitation of 
memory
Small Scale Embedded System
•
Single 8-bit or 16-bit microcontroller
•
Little hardware and software complexity
•
They may even be battery operated
•
Usually “C” is used for developing these system
•
The needs to limit power dissipation when system is running continuously
•
Examples: Digital watches
•
Programming Tools: Editor, Assembler and Cross Assembler
Medium Scale Embedded System
•
Single or few 16 or 32 bit microcontroller or Digital Signal Processors (DSP) or 
Reduced Instruction Set Computer (RISC)
•
Both hardware and software complexity
•
Examples: Ipod
•
Programming Tools: C, C++, Java, RTOS, Source code, Engineering Tools, 
Simulator, Debugger, and Integrated Development Environment (IDE)
Sophisticated Embedded System
•
It used more than 32-bit microcontroller
•
Enormous hardware and software complexity
•
Which may need scalable processor or configurable processor, and 
programming logic arrays
•
Constrained by the processing speed available in their hardware units
•
Example: Washing machine
•
Programming Tools: For these systems may not be readily available at a 
reasonable cost or may not be available at all. A compiler or retarget able 
compiler might have to be developed for this.
Embedded System Constraints
An embedded system is software designed to keep in view three constraints:
•
Available system memory
•
Available processor speed
•
The need to limit the power dissipation
When running the system continuously in cycles of wait for events, run, stop, and 
wakeup.
Processor
•
Is the heart of the embedded system
•
Is a microprocessor that is used in an embedded 
system
•
For an embedded system designer knowledge of 
microprocessor and microcontroller is a must
Two essential units: 
 
Operations
•
Control Unit (CU) 
 
Fetch
•
Execution Unit (EU) 
 
Execute
SOURCE: 
https://www.slideshare.net/VinodSrivastava5?utm_campaign=profiletracking&utm_medium=sssite&utm_source=ssslideview
Filters
Cyrel Ontimare Manlises
Filters
A frequency filter or also known as a frequency selective 
circuit is a special type of a circuit, which is used for filtering 
out some of the input signals on the basis of their frequencies.
A filter circuit passes some frequency signal’s without any 
attenuation (Reduction in amplitude) or with some 
amplification, & attenuate other frequency depending on the 
types of the filter.
Filters
SOURCE: https://www.electricaltechnology.org/2019/06/types-of-filters.html
PASSBAND
The band of frequencies of the input signal that pass through the filter without any 
attenuation is called Passband. Usually, the Passband has no gain considering the filter is a 
passive filter. In active-filters, the passband may have some gain depending on the 
configuration of the circuit.
STOPBAND
The band of frequencies of the input signal that are blocked or attenuated in the filter is 
called Stopband. the gain at the stop is usually taken to be less than -3db of the input.
-3db gain is considered for the 1st order filter. 2nd order filter has -6db gain, which 
decreases with the order of the filter.
Filters
CUTOFF FREQUENCY
The passband & stopband are distinguished from each other by the cutoff 
frequency or corner frequency. The output signal’s voltage at the cutoff frequency is 70.7% 
of the input signal’s voltage. It is also known as “-3db frequency” because -3db represents 
half power. And it is the frequency where the power of the output signal becomes half the 
power of the input signal.
Filters
In a band pass or band reject filter, there are two cutoff frequencies.
Lower Cutoff Frequency:
The lower frequency at which the gain of the filter is half or -3db. It is denoted by f1. 
Bandpass filter allows frequency after this point, whereas the band stop filter blocks it.
Upper Cutoff Frequency
The upper frequency at which the output power is reduced by ½ of the input power. It is 
denoted by f2. Bandpass filter does not allow frequency after this point, whereas the band 
stop filter allows it.
Filters
CENTER FREQUENCY f0
The frequency that lies at the center of the passband or stopband in a bandpass 
filter or band reject filter respectively is called center frequency. It lies in-
between the two cut-off frequency i.e. lower & Upper cut-off frequency. In fact, 
it is the arithmetic mean of both cut-off frequencies.
f0= (f1 + f2) / 2
Filters
BANDWIDTH
The range of frequencies that are passed (in case of bandpass filter) without any 
attenuation or the frequencies that are attenuated (in case of band reject filter) 
is called the bandwidth of the filter. The width of the frequencies before (in case 
of low pass filter) or after (in case of high pass filter)  the cutoff frequency is 
called bandwidth
It is the difference between both cutoff frequencies of the band pass or band 
reject filter.
 
 
 
Β = f2 – f1
Filters
ROLL-OFF RATE
It is the rate of change of gain/ output power, the drop rate of gain of the filter is 
called the roll-off rate. it is expressed as a gain loss per decade (ten times 
increase in frequency) or per octave (two-time increase in frequency).
The roll-off rate of nth order filter is 20n dB/decade or 6n dB/octave & n is the 
order of the filter. The per-decade means with a 10 times increase in frequency & 
the octave means a 2 times increase in frequency.
Filters
TYPES OF FILTERS
There are different types of filters classified based on their frequency response 
and construction.
BASED ON THEIR CONSTRUCTION:
According to the construction of the filters, there are two types of filters i.e. 
Passive Filters & Active filter.
Filters
PASSIVE FILTERS
As the name suggests, passive filters are made up of passive components, such 
as resistors, capacitors & inductors.
It does not need any external source of energy. Therefore there is no voltage gain 
in these filters. The output voltage is always less than its input voltage.
It can easily filter a high-frequency signal but it cannot process any low 
frequencies.
Although its design is simple but connecting a load to this filter impacts on its 
characteristics. Cascading the passive filters for higher order filter affects the 
characteristics of the filter.
Filters
ACTIVE FILTERS
In addition to the resistor & capacitor, Active filter uses an active 
component such as an operational amplifier, transistors, etc.
The downside is that it needs an external source of power, but it provides a high 
voltage gain. This gain is used for amplifying any weak input signals.
The active filter can filter very low-frequency signals but it cannot process very 
high-frequency signal.
They may have a little bit of complex design but they provide very high input & 
low output impedance. That is why; the load impedance does not affect the 
characteristics of the active filters.
to increase the order of the filter, active filters are used in cascading 
configuration without worrying about the loss of input signals power.
Filters
BASED ON THEIR FREQUENCY RESPONSE
The filters are classified based on the frequency response into the following four 
categories.
Filters
SOURCE: https://www.electricaltechnology.org/2019/06/types-of-filters.html
LOW PASS FILTER
Low Pass filter allow low-frequency signals without any attenuation (decrease in 
power) but it rejects any high-frequency signals.
The low pass filter has a reactive component, whose reactance varies with the 
input frequency. The variation in the reactance causes the voltage drop to 
increase or decrease inside the circuit. if the voltage drop is larger at the output, 
the signal will be passed, otherwise, it is rejected by the filter.
The passband & stopband frequencies are defined by the cutoff frequency of the 
filter.
Any frequency less than the cutoff frequency is passed without any attenuation. 
While any other higher frequency signal then the cutoff frequency will be blocked.
Filters
HIGH PASS FILTER
The type of filter that allows the high-frequency signals to pass without any 
attenuation in its amplitude & blocks (rejects) any low-frequency signal is called 
high pass filter.
Any signal with a frequency lower than the cutoff frequency of the filter gets 
blocked. While any signal with a frequency higher than the cutoff frequency 
passes with full amplitude.
Filters
BAND PASS FILTER
This type of filter allows a specific band of frequencies & blocks any other 
frequencies lower or higher than its passband frequencies.
This type of filter has two cutoff frequencies i.e. lower & upper cutoff frequency.
Bandpass blocks low frequencies & high frequencies, while allows the frequencies 
in between known as the passband frequencies.
Any input signal having frequency belonging to the passband frequencies will get 
passed without any attenuation.
Combining low pass filter & a high pass filter together in a cascade configuration 
will provide a bandpass filter.
The low pass filter will block high frequencies & the high pass will block low 
frequency. & they will pass the middle frequencies in between
Filters
BAND REJECT FILTER
This type of filter attenuates the signal whose frequencies lies in a fixed band of 
frequencies.
It is also known as Band Stop filter or Notch Filter.
It works completely opposite to the bandpass filter. It allows low-frequency signal 
& high-frequency signals. But it does not allow a fixed band of frequencies in 
between.
It also has lower & upper cutoff frequencies. And any signals having frequency in-
between these cutoff frequencies are rejected by the filter.
Filters
APPLICATIONS OF FILTERS
Frequency filters have so many applications in our livelihood; some of these 
applications are given below;
The tuner in radio: The bandpass filter in the tuner of the radio allows a fixed 
frequency to the output speaker.
Treble & bass of the speaker: The bass has lower frequencies & treble has higher 
frequencies. They are separated using high pass & low pass filter and are 
separately routed to corresponding bass speaker & treble speaker for clear music.
Anti-Aliasing: it is a low pass filter that filters out the high-frequency components 
from a signal before sampling. It prevents the aliasing component form being 
sampled.
Filters
APPLICATIONS OF FILTERS
Notch Filter: they are band rejects filters with a narrow bandwidth that filter out 
any interfering signal.
Power Supply Smoothing: The output of the power supply which is a rectifier has 
an AC ripple in it. These frequencies are filtered out using a low pass filter which 
results in smoothing the output signal.
Noise suppression: They are used in communication systems for noise removal 
from the received signals.
Filters
TYPE OF HIGH PASS FILTERS
HIGH PASS FILTER: Such type of frequency filters that blocks or attenuate any low-
frequency signal & allow only high-frequency signals. It blocks frequency less than 
a selected frequency known as corner or cutoff frequency. 
There are two main types of high pass filter;
1. PASSIVE HIGH PASS FILTER
2. ACTIVE HIGH PASS FILTER
Filters
PASSIVE HIGH PASS FILTER
A Filter that is made up of only passive components such as resistor, capacitor & 
inductor is called Passive filter. Passive filters do not need any external source thus 
they have no gain i.e. the output signal amplitude is always equal to or less than 
the input signal amplitude.
The design of a passive filter is very simple & the components used are very 
cheap.
A simple High Pass filter is designed using a resistor with a capacitor (known as RC 
circuit) & with Inductor (known as RL Circuit). 
Filters
TYPES OF PASSIVE HIGH PASS FILTER:
1.
FIRST ORDER PASSIVE HIGH PASS FILTER
2.
SECOND ORDER PASSIVE HIGH PASS FILTER
Filters
FIRST ORDER PASSIVE HIGH PASS FILTER:
First order filters contain only one reactive component i.e. either capacitor or 
inductor. It is the simplest form of filter made from only two components with 
resister being common in both designs i.e. RC & RL.
FREQUENCY RESPONSE AND TERMS USED IN IT:
In order to understand a filter, you need to study its frequency response. 
Frequency response or bode plot is a graph of a circuit which shows its gain on the 
vertical axis with respect to the frequency on the horizontal axis.
However, the frequency response contains some key terms which need to be 
discussed to fully understand it. Here is a frequency response of First-order High 
Pass filter.
Filters
This frequency response clearly shows the gain of a high pass filter which is 
increasing with the frequency.
Filters
SOURCE: https://www.electricaltechnology.org/2019/06/types-of-filters.html
CUT OFF FREQUENCY OR CORNER FREQUENCY
The frequency at which the gain of the filter is ½ or -3db or the output amplitude 
is 70.7% (1/√2) of the input is known as corner frequency it is denoted by fc. It is 
the boundary between passband & stop band of a filter.
STOP BAND
The Stop band is the band of frequencies that is blocked by the filter. in a high pass 
filter, the frequency that is lower than the cutoff frequency fc is the stop band 
frequency.
As pointed out in the graph, the gain of the filter at the stop band is very low.
PASS BAND
The band of frequency that gets passed through the filter without attenuation is 
passband. The frequency above the cutoff frequency fc is the passband frequency 
of a high pass filter. It is clearly shown in the frequency response graph above.
Filters
THE BANDWIDTH OF THE FILTER
The width of the frequency allowed by the filter is called the bandwidth of the 
filter. According to this definition, the bandwidth of high pass filter is infinite i.e. 
frequency from cutoff point fc till infinity.
THE GAIN OF FILTER
The gain of the filter is given by;
𝐺𝑎𝑖𝑛= 𝑉𝑜𝑢𝑡
𝑉𝑖𝑛
The gain provided in the frequency response graph is in dB (logarithmic form), 
which is given by;
𝐺𝑎𝑖𝑛 𝑖𝑛 𝑑𝐵= 20 log (𝑉𝑜𝑢𝑡
𝑉𝑖𝑛
)
Filters
GAIN AT CUTOFF FREQUENCY
We have established that the output amplitude at the cutoff frequency is 70.7% or 
(1/√2) of its input max amplitude. 
𝑉𝑜𝑢𝑡= 1
2
𝑉𝑖𝑛
Converting the gain into dB;
𝐺𝑎𝑖𝑛 𝑖𝑛 𝑑𝐵= 20 log (𝑉𝑜𝑢𝑡
𝑉𝑖𝑛
)
𝐺𝑎𝑖𝑛 𝑖𝑛 𝑑𝐵= 20 log (
1
2 𝑉𝑖𝑛
𝑉𝑖𝑛
)
𝐺𝑎𝑖𝑛 𝑖𝑛 𝑑𝐵= 20 log (
1
2)
𝐺𝑎𝑖𝑛 𝑖𝑛 𝑑𝐵= −3𝑑𝐵
 
 
Filters
ROLL OF RATE
The roll off rate is the rate of change in gain or steepness of the curve in the stop 
band of a filter. It depends on the order of the filter & it is given by;
20n dB/decade or 6n dB/octave
Where n is the order of the filter.
The decade means 10 times increase in the frequency whereas the octave means 
2 times increase in the frequency.
 
 
Filters
RC FIRST ORDER HIGH PASS FILTER
In this design of high pass filter, a capacitor is connected with a resistor in series. 
The input signal is applied through the capacitor. The output is taken across the 
resistor as shown in the figure.
Its design is the same as RC low Pass filter with a minute change of swapping the 
position of capacitor & resistor.
Filters
SOURCE: https://www.electricaltechnology.org/2019/06/types-of-filters.html
OPERATION
The reactance of the capacitor is very high at low frequency. It acts as an open 
circuit to low frequency signals. Thus the low-frequency input signal gets blocked 
and it never makes it to the output terminal as the whole signal appears across the 
capacitor.
The capacitor’s reactance decreases with increases in the frequency. Therefore it 
starts allowing the input signal when it reaches a specific frequency.
The reactance of the capacitor plays a major role in this filter’s performance. It 
depends only on the signal frequency
𝑋𝐶=
1
2𝜋𝐹𝐶
The total impedance of this circuit is;
𝑍=
𝑋𝐶
2 + 𝑅2
Filters
CUTOFF FREQUENCY OF PASSIVE RC HIGH PASS FILTER
At the cutoff frequency, the resistance and the capacitive reactance of the circuit 
are equivalent. i.e.
𝑅=
1
2𝜋𝑓𝐶
𝑅= 𝑋𝐶
𝑓𝐶=
1
2𝜋𝑅𝐶
The phase shift φ(phi) of this filter is given by;
∅= 𝑡𝑎𝑛−1{
1
2𝜋𝑓𝑅𝐶}
∅= 𝑡𝑎𝑛−1{
𝑓𝑐
𝑓}
Thus, the phase shift at the cutoff frequency will be always;
∅= 𝑡𝑎𝑛−1{𝑓𝑐
𝑓𝑐}
∅= 𝑡𝑎𝑛−1(1)
∅= 45°
Filters
OUTPUT VOLTAGE
The output voltage for this circuit is given by applying the voltage divider rule;
𝑉𝑜𝑢𝑡=𝑉𝑖𝑛
𝑅
𝑍
𝑉𝑜𝑢𝑡= 𝑉𝑖𝑛
𝑅
𝑋𝑐2 + 𝑅2
Filters
EXAMPLE OF PASSIVE RC HIGH PASS FILTER
Let’s assume the resistor R = 10kΩ & the capacitor C = 10nF.
Calculating the cutoff frequency for this filter;
𝑓𝐶=
1
2𝜋𝑅𝐶
𝑓𝐶=
1
2𝜋 𝑥 10 𝑥 103 𝑥 10 𝑥10−9
𝑓𝐶= 𝟏𝟓𝟗𝟏 𝑯𝒛= 𝟏. 𝟓𝟗𝒌𝑯𝒛
Sample simulation:
The frequency is shown at the 
bottom left corner and its 
corresponding 
gain 
at 
the 
bottom right corner for the 
selected point on the graph. It 
clearly shows a gain of -3dB at 
the frequency 1.59 KHz which is 
the cutoff frequency of this 
filter.
Filters
SOURCE: https://www.electricaltechnology.org/2019/06/types-of-filters.html
RL FIRST ORDER HIGH PASS FILTER
This filter is designed by combining a resistor with an inductor. The input is applied 
to the resistor and the output is taken across the inductor as shown in the figure 
down below;
Filters
SOURCE: https://www.electricaltechnology.org/2019/06/types-of-filters.html
signal
RL circuit
OPERATION
The inductor’s reactance depends on the frequency of the signal. It is directly 
proportional to the frequency. When a low-frequency signal is applied, the 
reactance of the inductor becomes very low and it starts behaving as a short 
circuit. Whereas the resistance of the resistor is relatively very large. Thus 
the signal only develops across the resistor, leaving a little to no voltage at the 
output terminal.
When the frequency increases, the reactance of the inductor also increases. 
Eventually, it overcomes the resistance of the resistor and starts to develop a large 
portion of the input signal across its terminals.
This is how the low-frequency signal is filtered out through the RL high pass filter.
The Inductive reactance is given by;
The impedance of this RL circuit is given by;     Z =
𝑋𝐿
2 + 𝑅2
𝑋𝐿= 2𝜋𝑓𝐿
Filters
CUTOFF FREQUENCY OF RL PASSIVE HIGH PASS FILTER
At the cutoff frequency, the resistance and the capacitive reactance of the circuit 
are equivalent. i.e.
𝑅= 2𝜋𝑓𝐿
𝑅= 𝑋𝐿
𝑓𝐶= 𝑅
2𝜋𝐿
The phase shift φ(phi) of this filter is given by;
∅= 𝑡𝑎𝑛−1{
𝑅
2𝜋𝑓𝐿}
∅= 𝑡𝑎𝑛−1{
𝑓𝑐
𝑓}
Filters
OUTPUT VOLTAGE
Applying the voltage divider rule, the output voltage of the circuit is given by;
𝑉𝑜𝑢𝑡=𝑉𝑖𝑛(𝑋𝐿
𝑍)
𝑉𝑜𝑢𝑡= 𝑉𝑖𝑛{
𝑋𝐿
𝑋𝐿
2 + 𝑅2}
Filters
EXAMPLE OF FIRST ORDER RL HIGH PASS FILTER
Assume a resistor R = 2.2 KΩ with capacitor C = 10mH.
Let’s find its cutoff frequency using its formula;
𝑓𝐶= 𝑅
2𝜋𝐿
𝑓𝐶=
2.2 𝑥 103
(2𝜋 𝑥 10 𝑥 10−3) 
𝑓𝐶= 𝟑𝟓, 𝟎𝟏𝟒 𝑯𝒛= 𝟑𝟓𝒌𝑯𝒛
Sample simulation:
As shown in the frequency graph 
above, the gain at the frequency 
of 35 KHz is -3db which is the 
gain at the cutoff frequency.
Filters
SOURCE: https://www.electricaltechnology.org/2019/06/types-of-filters.html
SECOND ORDER PASSIVE HIGH PASS FILTER:
First order filters contain only one reactive component i.e. either capacitor or 
inductor. It is the simplest form of filter made from only two components with 
resister being common in both designs i.e. RC & RL.
KEY FEATURES OF SECOND ORDER FILTERS
1.
ROLL OFF RATE
The roll off rate of a filter is given by;
Roll Off Rate = 20n dB/decade or 6n dB/octave
Where n is the order of the filter
So the roll-off rate of 2nd order filter is 40 dB/decade or 12 dB/octave. This means 
that the curve of the 2nd order filter is steeper than a 1st order filter.
Filters
KEY FEATURES OF SECOND ORDER FILTERS
2. GAIN AT CUTOFF FREQUENCY
The cutoff frequency gain of an nth stage filter is given by;
𝐺𝑎𝑖𝑛 𝑎𝑡𝑓𝑐= ( 1
2
)𝑛
Thus the gain of a 2nd order filter is;
𝐺𝑎𝑖𝑛 𝑎𝑡𝑓𝑐= ( 1
2
)2
𝐺𝑎𝑖𝑛 𝑎𝑡𝑓𝑐 = 1
2
Converting the gain into dB;
𝐺𝑎𝑖𝑛 𝑖𝑛 𝑑𝐵= 20 log (1
2)
𝐺𝑎𝑖𝑛 𝑖𝑛 𝑑𝐵= −6𝑑𝐵
Hence the gain of a 2nd order high pass filter at the cutoff frequency is -6b. It also 
makes sense because the gain of each stage adds up when they are cascaded. 
Filters
-3dB FREQUENCY
We know that the gain at the cutoff frequency is -6b which is not the true 
passband frequency. The passband frequency of any filter lies at gain of-3dB. So 
the -3dB frequency of an nth order high pass filter is calculated by;
𝑓−3𝑑𝐵= 𝑓𝑐
2(1
𝑛) + 1
Where n is the order of the high pass filter.
It determines the stopband and passband frequencies of the filter. Hence, the -3db 
frequency of a 2nd order high pass filter becomes.
𝑓−3𝑑𝐵= 𝑓𝑐
2(1
2) + 1
𝑓−3𝑑𝐵= 𝑓𝑐
2 + 1
Filters
LOADING EFFECT
It is the phenomenon of low signal drop at the load circuit due to its low 
impedance than the source circuit.
Ideally, when evaluating the performance of a multistage filter, we do not consider 
the input & output impedance of each stage. Practically if the succeeding stage 
has equal or lower input impedance than the preceding stage, the signal drop will 
be low at the succeeding stage. This causes an erroneous output.
To reduce the loading effect, the impedance of the succeeding stage should be at 
least 10 times higher than the preceding stage. It is done by scaling the resistor, 
capacitor & inductor in both stages of the multistage filters.
Filters
RC SECOND ORDER PASSIVE HIGH PASS FILTER
Cascading two 1st order RC high pass filters provide a 2nd order filter RC high pass 
filter as shown in the figure down below.
CUTOFF FREQUENCY OF 2ND ORDER RC HIGH PASS FILTER
The cutoff frequency of cascading filters depends on both stages & it is given by;
𝑓𝑐=
1
(2𝜋𝑅1𝑅2𝐶1𝐶2)
but if the Resistor R1 = R2 & the capacitor C1 = 
C2, then the cutoff frequency becomes;
𝑓𝑐=
1
2𝜋𝑅𝐶
Filters
SOURCE: https://www.electricaltechnology.org/2019/06/types-of-filters.html
EXAMPLE OF RC 2ND ORDER PASSIVE HIGH PASS FILTER
Assume the resistor R1 = R2 = 10KΩ & the capacitor C1 = C2 = 10nF.
Scaling the resistor & capacitors to increases 
the impedance of the second stage;
Increasing the impedance of the 2nd stage by 
the scale of 10
𝑅2
′ = 10𝑅2=10 x 10KΩ = 100KΩ
𝐶2
′ = 𝐶2
10 = 10𝑛𝐹
10
= 1𝑛𝐹
Decreasing the impedance of 1st stage by 10
𝑅1
′ = 𝑅1
10 = 10KΩ
10
= 1KΩ
𝐶1
′ = 10𝐶1=10 x 10 𝑛𝐹 = 100 𝑛𝐹
Filters
SOURCE: https://www.electricaltechnology.org/2019/06/types-of-filters.html
The R1
’, R2
’, C1
’
, C2
’ is the scaled resistor and capacitors. Remember, scaling is done 
for practical implementation. The scaling factor should be the same for both 
stages to get the same response. Theoretically, the cutoff frequency for both 
configurations remains the same.
Now calculate the cutoff frequency fc;
𝑓𝐶=
1
2𝜋𝑅𝐶
𝑓𝐶=
1
2𝜋 𝑥 10 𝑥 103 𝑥 10 𝑥10−9
𝑓𝐶= 𝟏𝟓𝟗𝟏 𝑯𝒛= 𝟏. 𝟓𝟗𝒌𝑯𝒛
Now, we will calculate its -3dB frequency which is the actual cutoff frequency.
𝑓−3𝑑𝐵= 𝑓𝑐
2(1
2) + 1
𝑓−3𝑑𝐵= 1.59 𝑥 103
2 + 1
𝑓−3𝑑𝐵= 𝟐. 𝟒𝟕𝑲𝑯𝒛
So the cutoff frequency of this filter is 2.47 KHz which lie at the gain of -3dB.
Filters
Sample simulation:
It clearly shows a gain of -3dB at 
the frequency 2.47 KHz & the -
6dB point in also highlighted 
which is at 1.59 KHz.
SOURCE: https://www.electricaltechnology.org/2019/06/types-of-filters.html
SECOND ORDER RL HIGH PASS FILTER
Just like RC filter, cascading two 1st order RL high pass filter will create a 2nd order 
RL high pass filter as shown in the figure down below.
CUTOFF FREQUENCY OF 2ND ORDER RL HIGH PASS FILTER
The corner frequency or cutoff frequency fc of 2nd order RL High pass filter is given 
by.
𝑓𝑐= ( 1
2𝜋
𝑅1𝑅2
𝐿1𝐿2
)
Or if the inductor and resistors have the same value, 
then the corner frequency becomes;
𝑓𝑐= 𝑅
2𝜋𝐿
Filters
SOURCE: https://www.electricaltechnology.org/2019/06/types-of-filters.html
EXAMPLE OF 2ND ORDER RL HIGH PASS FILTER
We are going to assume the value of resistor and inductor in both stages are same 
i.e. the resistor R1 = R2 = 2.2 KΩ & the inductor L1 = L2 = 10 mH
We have taken the same value resistor for 
the sake simple calculation. Practically you 
have to increases the impedance of the 
2nd stage by scaling the resistors & inductors 
as shown below;
Increasing the impedance of the 2nd stage by 
the scale of 10
𝑅2
′ = 10𝑅2=10 x 2.2KΩ = 22KΩ
𝐿2
′ = 10𝐿2=10 x 10mH = 100mH
Decreasing the impedance of 1st stage by 10
𝐿1
′ = 𝐿1
10 = 10𝑚𝐻
10
= 1𝑚𝐻
𝑅1
′ = 𝑅1
10 = 2.2KΩ
10
= 220Ω
Filters
SOURCE: https://www.electricaltechnology.org/2019/06/types-of-filters.html
Let’s calculate the cutoff frequency of the filter;
𝑓𝑐= 𝑅
2𝜋𝐿
𝑓𝐶=
2.2 𝑥103
2𝜋 𝑥 10 𝑥 10−3 
𝑓𝐶= 𝟑𝟓, 𝟎𝟏𝟒 𝑯𝒛= 𝟑𝟓𝑲𝑯𝒛
But this is the frequency at -6dB & we need -3db frequency of the filter which is the 
actual cutoff frequency. It is given by;
𝑓−3𝑑𝐵= 𝑓𝑐
2(1
2) + 1
𝑓−3𝑑𝐵= 35 𝑥 103
2 + 1
𝑓−3𝑑𝐵= 𝟓𝟒. 𝟑𝟖𝑲𝑯𝒛 ≈𝟓𝟒. 𝟒𝑲𝑯𝒛
Sample simulation:
It clearly shows a gain of -3dB at 
the frequency 2.47 KHz & the -
6dB point in also highlighted 
which is at 1.59 KHz.
Filters
SOURCE: https://www.electricaltechnology.org/2019/06/types-of-filters.html
Filters
Part II
Cyrel Ontimare Manlises
Filters
ACTIVE FILTERS
The active filter is a type of filter that comprises of one or more 
than one active component such as transistors, amplifiers or OP-
Amps. In contrast to passive filters, Active filter’s have an 
amplification factor which can be modified. They have high input 
impedance and low output impedance which nullifies the 
loading effect that occurs in passive filters.
LOW PASS FILTER
Low pass filter or LPF is a type of filter that allows signals having 
frequency lower than a specific frequency known as cut-off 
frequency & blocks higher frequency signals.
Filters
SOURCE: https://www.electricaltechnology.org/2019/06/types-of-filters.html
TWO TYPES OF LOW PASS FILTERS
1. PASSIVE LOW PASS FILTER
2. ACTIVE LOW PASS FILTER
FIRST ORDER ACTIVE HIGH PASS FILTER:
First order Active low pass filter is a simple filter that is made of only one reactive 
component i.e Capacitor along with an active component Op-Amp. A resistor is 
used with the Capacitor or Inductor to form RC or RL low pass filter respectively. 
The roll off rate of first order low pass filter is -20dB/decade or –6dB/octave. The 
roll-off rate depends on the order of the filter.
Roll-Off Rate = -20n dB/decade = -6n dB/octave
Where n = order of the filter
Filters
One should already know the basic configuration of an op-amp before its 
implementation. Op-Amp can be used in the following configurations:
✓Non-Inverting (voltage follower) Configuration
✓Buffer (Unity gain)
✓Inverting Configuration
Filters
SOURCE: https://www.electricaltechnology.org/2019/06/types-of-filters.html
NON-INVERTING OR VOLTAGE FOLLOWER CONFIGURATION:
As you know that in the voltage follower configuration, the input signal is applied 
at the positive terminal of the Op-Amp. the output voltage is in phase with the 
input voltage that is why it is called voltage follower. But to achieve the desired 
result (of low pass filter), the schematic can be designed in a variety of 
configurations.
Filters
STANDARD OP-AMP CONFIGURATION
The standard configuration implies the use of Op-amp as a separate amplifier at 
the output of a traditional RC Low Pass filter circuit. It can be realized from the 
schematics given below.
The gain of this voltage follower amplifier is given by : 𝐺𝑎𝑖𝑛= 𝐴= 1 +
𝑅2
𝑅1
We can use it with or without amplification depending on the requirement of the 
filter.
Filters
UNITY GAIN OR BUFFER CONFIGURATION
In such configuration, the gain of the Op-Amp remains unity (one) i.e. the output 
signal amplitude is equal to the input signal amplitude. There is no feedback 
resistor, so the gain of the Op-Amp (Amplifier) becomes 1.
The schematic for voltage follower unity gain low pass filter is given below.
The fact that this is a voltage follower configuration, the output signal will be the 
exact same replica of the input signal.
 
 
Filters
EXAMPLE
Let’s simulate an example of this schematic using Proteus to evaluate the 
frequency response of this circuit.
 
 
Filters
The resistor used in this example of 10 
KΩ & the capacitor is 104 nF.
So, the cutoff frequency of this filter 
will be:
𝑓𝐶=
1
2𝜋𝑅𝐶
𝑓𝐶=
1
2𝜋 𝑥 10 𝑥 103 𝑥 104 𝑥10−9
𝑓𝐶= 𝟏𝟓𝟑 𝑯𝒛
Here is the simulated graph using Proteus which clearly shows the corner 
frequency (cutoff frequency) which actually lies at -3dB.
The question here is “why we use an Op-Amp amplifier when there is no 
amplification?”. The answer is, to provide high input and low output impedance. 
By using unity gain op-amp between the stages of multistage amplifiers, it ensures 
the maximum signal transfer to the succeeding stage.
Filters
SOURCE: https://www.electricaltechnology.org/2019/06/types-of-filters.html
The first part of the circuit i.e. Resistor R & capacitor C forms the traditional RC low 
pass filter which has the same properties, as discussed in the passive RC low pass 
filters. The second part of the schematic given above is the Op-Amp which 
provides the voltage gain.
Filters
NON-INVERTING FILTER WITH AMPLIFICATION
This type of filter uses the Op-Amp as a voltage amplifier. The amplification aspect 
of this configuration provides a voltage gain for any weaker input signal. The 
schematic of a non-inverting RC low pass filter is given below;
THE VOLTAGE GAIN:
The feedback resistor R2 & R1 are responsible for the gain of the amplifier. The 
equation used for the voltage gain of the non-inverting amplifier is;
Filters
𝐺𝑎𝑖𝑛= 𝐴𝑉= 1 + 𝑅2
𝑅1
CUTOFF FREQUENCY
The cutoff frequency, also known as -3dB frequency, is determined by the RC filter 
connected to the input of the Op-amp. The -3dB frequency is given by;
𝑓𝐶=
1
2𝜋𝑅𝐶
GAIN AT CUTOFF FREQUENCY
In passive filters, the gain at cutoff frequency is considered at -3dB. That is 
because the passive filters have unity gain i.e. 0dB. So the cutoff frequency point is 
given by 0dB – 3dB = -3dB
Whereas, the active filter gain at corner frequency will be -3dB of the gain of the 
filter.
The gain of the active filter in decibels is;
Filters
𝐺𝑎𝑖𝑛 𝐴𝑉𝑖𝑛 𝑑𝐵= 20 log  ( 𝐴𝑉)
Suppose the active filter gain is 10dB. So the gain at the cutoff frequency of that 
filter would be;
𝐺𝑎𝑖𝑛 𝑎𝑡 𝑓𝑐= 10 𝑑𝐵−3𝑑𝐵= 7𝑑𝐵
The system will allow any frequency below this cutoff point and blocks any higher 
frequencies. So the bandwidth of the system become fc Hz.
EXAMPLE 
The resistors used in this examples are R = 10 kΩ, R1 = 1 kΩ & R2 = 9 KΩ
& the capacitor C = 104 nF.
So the cut off frequency of the filter is ;
𝑓𝐶=
1
2𝜋𝑅𝐶
𝑓𝐶=
1
2𝜋 𝑥 10 𝑥 103 𝑥 10 𝑥10−9
𝑓𝐶= 𝟏𝟓𝟑 𝑯𝒛
Filters
SOURCE: https://www.electricaltechnology.org/2019/06/types-of-filters.html
The gain of the filter is;
𝐴𝑣= 1 + 𝑅2
𝑅1
𝐴𝑣= 1 + 9 𝑥 103
1 𝑥 103
𝐴𝑣= 10
So the gain at cutoff frequency is;
𝐺𝑎𝑖𝑛 𝑎𝑡 𝑓𝑐= 20 𝑑𝐵−3𝑑𝐵= 17𝑑𝐵
Sample simulation:
From the given frequency 
response, you can see the cutoff 
frequency is 153 Hz at gain 17 
dB. The bandwidth of this filter 
is 153 Hz.
LIMITATION
This design does have one flaw. The output impedance does not change but the 
input impedance may vary because of the source impedance. It may either 
decrease or increase, which would impact on the characteristics of the filter 
response.
Filters
SOURCE: https://www.electricaltechnology.org/2019/06/types-of-filters.html
IMPROVED DESIGN
To improve the design of the filter discussed above, the capacitor position is 
changed from the input side of the circuit to the parallel connection with the 
feedback resistor. This way the input source impedance won’t affect the 
impedance of the filter. The circuit for non-inverting low pass filter is given below:
Filters
IMPROVED DESIGN
To improve the design of the filter discussed above, the capacitor position is 
changed from the input side of the circuit to the parallel connection with the 
feedback resistor. This way the input source impedance won’t affect the 
impedance of the filter. The circuit for non-inverting low pass filter is given below:
So the cut off frequency of the filter is ;
𝑓𝐶=
1
2𝜋𝑅𝐶
𝐺𝑎𝑖𝑛= 𝐴𝑉= 1 + 𝑅2
𝑅1
The gain of the filter is the same as the previous design i.e.
And the gain at the cutoff frequency calculated by subtracting 3dB from the gain of 
the filter in dB.
EXAMPLE
The resistor R2 = 9 kΩ& R1 = 1 kΩ& the capacitor C = 104 nF.
Using the equation of the cutoff frequency, we calculate;
Filters
𝑓𝐶=
1
2𝜋𝑅2𝐶
𝑓𝐶=
1
2𝜋 𝑥 9 𝑥 103 𝑥 104 𝑥10−9
𝑓𝐶= 𝟏𝟕𝟎 𝑯𝒛
Where the gain of the filter is;
𝐴𝑣= 1 + 𝑅2
𝑅1
𝐴𝑣= 1 + 9 𝑥 103
1 𝑥 103
𝐴𝑣= 10
Converting the gain of the filter into decibels;
𝐴𝑣= 20 log(10)
𝐴𝑣= 20𝑑𝐵
So the gain at cutoff frequency is;
𝐺𝑎𝑖𝑛 𝑎𝑡 𝑓𝑐= 20 𝑑𝐵−3𝑑𝐵= 17𝑑𝐵
Sample simulation:
The cutoff frequency point 170 
Hz lies at the gain of 17 db.
INVERTING AMPLIFIER LOW PASS FILTER
This type of filter is made using the Operation amplifier in inverting configuration. 
In inverting configuration, the input signal is applied to the negative terminal of 
the Op-Amp & the positive terminal is grounded. The output of this filter is 
inverted, other than that the frequency response is the same as the non-inverting 
filter.
Filters
The schematic of the inverting amplifier low pass filter 
shows the input signal applied to the negative terminal 
of the Op-Amp.
The equation for the cutoff frequency of this filter is;
𝑓𝐶=
1
2𝜋𝑅2𝐶
The equation for the cutoff frequency of this filter is;
𝐴𝑣= −(𝑅2
𝑅1
)
Filters
SOURCE: https://www.electricaltechnology.org/2019/06/types-of-filters.html
The negative sign shows that the output is inverted.
It is a first order filter, which means the roll-off rate in the frequency response is -
20dB/decade or -6dB/octave.
Following is an example of an inverting amplifier low pass circuit.
Let suppose the resistor R1 = 1 kΩ, R2 = 10 kΩ& Capacitor C = 150 nF
The cutoff frequency of the filter is;
𝑓𝐶=
1
2𝜋𝑅2𝐶
𝑓𝐶=
1
2𝜋 𝑥 10 𝑥 103 𝑥 150 𝑥10−9
𝑓𝐶= 𝟏𝟎𝟔 𝑯𝒛
The gain of the filter is;
𝐴𝑣= −(𝑅2
𝑅1
)
𝐴𝑣= −10 𝑥 103
1 𝑥 103
𝐴𝑣= −10
The gain of this filter is 10. The negative sign implies the output is inverted.
Converting the gain into dB;
𝐴𝑣= 20 log(10)
𝐴𝑣= 20𝑑𝐵
Filters
So the gain at cutoff frequency is;
𝐺𝑎𝑖𝑛 𝑎𝑡 𝑓𝑐= 20 𝑑𝐵−3𝑑𝐵= 17𝑑𝐵
Sample simulation:
The graph clearly shows the 
17dB gain point at which the 
corner frequency is 106 Hz. The 
cutoff frequency is given at the 
bottom left corner & the gain is 
given at the bottom right corner 
for the selected point. The 
frequency blocks any higher 
frequencies from this point.
SECOND ORDER ACTIVE LOW PASS FILTER
The second order active low pass filter are very commonly used in many 
applications.
A second order filter has 40 dB/decade roll off or 12dB/octave roll off. Whereas 
the first order filter has 20 dB/decade or 6dB/octave.
To get a second order filter a simple method is to cascade two first-order filters. 
Other designs of the 2nd order filters are named after their inventor such as Sallen-
Key filter, Butterworth filter, Chebyshev filter & Bessel, etc.
Filters
BY CASCADING
Cascading two first order filters together provide a 2nd order filter. The schematic 
of cascading a two 1st order filter is given below:
Filters
This schematic shows a non-inverting filter cascaded together. Cascading two 
inverting filters will also form a 2nd order filter with the same characteristics as 
this filter.
GAIN OF FILTER
The gain of the second order filter is a product of gain of both stages i.e.
Filters
𝐺𝑎𝑖𝑛, 𝐴𝑣= 𝐴𝑠1𝑥𝐴𝑠2
𝐴𝑠1 = 1 + 𝑅2
𝑅1
𝐴𝑠2 = 1 + 𝑅4
𝑅3
If the gain of both stages is given in dB, then the total gain is calculated by 
summation of both gains.
𝐴𝑣𝑖𝑛 𝑑𝐵= 𝐴𝑠1 + 𝐴𝑠2
CUTOFF FREQUENCY
The equation for cutoff frequency is;
if the resistor Rs1 = Rs2= R & capacitor Cs1 = Cs2 = C then the equation becomes;
𝑓𝑐=
1
2𝜋𝑅𝑠1𝑅𝑠2𝐶𝑠1𝐶𝑠2
𝑓𝐶=
1
2𝜋𝑅𝐶
THE GAIN AT CUTOFF FREQUENCY
As we know that the gain at the cutoff frequency for the first stage of the filter is 
at -3db. Same as the case with second stage filter. When you combine them 
together, the gain at the cutoff frequency for the overall filters lies at -6db. We will 
confirm that in an example.
Filters
SOURCE: https://www.electricaltechnology.org/2019/06/types-of-filters.html
EXAMPLE
Let’s suppose the Rs1 = Rs2 = 10 kΩ& capacitor Cs1 = Cs2 = 150 nF , and the gain 
resistors R1 = 1KΩ, R2 = 9KΩ, R3= 1KΩ, R4 = 1KΩ.
Since the RC network resistors and capacitors have the same values, the cutoff 
frequency becomes;
𝑓𝐶=
1
2𝜋𝑅𝐶
𝑓𝐶=
1
2𝜋 𝑥 10 𝑥 103 𝑥 150 𝑥10−9
𝑓𝐶= 𝟏𝟎𝟔 𝑯𝒛
Filters
SOURCE: https://www.electricaltechnology.org/2019/06/types-of-filters.html
The gain of the first stage amplifier is;
𝐴𝑆1 = 1 + (𝑅2
𝑅1
)
𝐴𝑆1 = 1 + 9 𝑥 103
1 𝑥 103
𝐴𝑆1 = 10
The gain of the second stage is;
𝐴𝑆2 = 1 + (𝑅4
𝑅3
)
𝐴𝑆2 = 1 + 1 𝑥 103
1 𝑥 103
𝐴𝑆2 = 2
The total gain of the filter;
𝐴𝑉= 10 𝑥 2
𝐴𝑣= 20
The total gain in dB;
𝐴𝑉= 20 𝑙𝑜𝑔20
𝐴𝑣≈26𝑑𝐵 
So the gain at the cutoff frequency is;
𝐺𝑎𝑖𝑛 𝑎𝑡 𝑓𝑐= 26 𝑑𝐵−6𝑑𝐵= 20𝑑𝐵
Filters
Sample simulation:
SOURCE: https://www.electricaltechnology.org/2019/06/types-of-filters.html
SALLEN-KEY LOW PASS FILTER
Sallen-Key topology filters provide a variety of 2nd order frequency selective filters 
including low pass, high pass, band pass & band reject filter.
It is a form of voltage controlled voltage source (VSVS) which uses a single op Amp 
with two capacitor & two resistors. And off-course the two other resistors for the 
gain of the filter.
Filters
SOURCE: https://www.electricaltechnology.org/2019/06/types-of-filters.html
There are two RC filter networks i.e. R1C1 & R2C2. These two filters set the 
characteristics of the filter frequency response.
The cutoff frequency of this filter is;
𝑓𝑐=
1
2𝜋𝑅1𝑅2𝐶1𝐶2
If the resistor R1 = R2 = R & Capacitor C1= C2 = C, the equation of cutoff frequency 
becomes;
𝑓𝐶=
1
2𝜋𝑅𝐶
The gain of the filter is given by;
𝐴= 1 + 𝑅𝑏
𝑅𝑎
Filters
SOURCE: https://www.electricaltechnology.org/2019/06/types-of-filters.html
QUALITY FACTOR Q
The quality factor Q determines the behavior of the frequency response of the 
system i.e. under damp, overdamp or critically damp systems. These systems are 
discussed down below;
Whereas the equation for the quality factor Q of a Sallen-Key Low Pass filter is;
𝑄=
𝑅1𝑅2𝐶1𝐶2
𝑅1𝑅2 1 −𝐴+ 𝐶2(𝑅1 + 𝑅2)
𝐹𝑜𝑟 𝑢𝑛𝑖𝑡𝑦 𝑔𝑎𝑖𝑛, 𝐴= 1
𝑄=
𝑅1𝑅2𝐶1𝐶2
𝐶2(𝑅1 + 𝑅2)
𝑖𝑓 𝑅1 = 𝑅2 & 𝐶1 = 𝐶2
𝑄=
1
3 −𝐴
𝑄= 1
2
∴𝐴= 1
Filters
SOURCE: https://www.electricaltechnology.org/2019/06/types-of-filters.html
The frequency response of a Sallen-Key filter varies with gain A, Quality factor 
Q & the damping factor ζ (zeta). The Q factor & damping factor ζ are inversely 
proportional to each other
𝑄= 1
2𝜁
𝑄=
1
3 −𝐴
𝐴= 3 −1
𝑄
𝐴= 3 −2𝜁
It shows that the Q factor depends on the gain of the filter (considering the 
resistor & capacitor are the same). So the gain A for a non-inverting amplifier 
should be between 3 & 1. The damping factor ζ should be between 0 & 2.
Remember, These conditions only apply when the resistor R1= R2 and capacitors 
C1 = C2.
SYSTEM BASED ON Q FACTOR
1.
If Q < ½, the system is called Over Damped. The system has a low-quality 
factor. it does not oscillate at any frequency. A low-quality filter acts as a 
1st order low pass filter.
2.
If Q = ½, the system is called Critically Damped. It does not oscillate at any 
frequency 
just 
like 
an 
over 
damped 
filter. 
But 
it 
has 40db/decade or 12db/octave roll-off rate with its cutoff frequency at -
6db gain because of the steeper roll-off rate. it is a perfect case for 2nd order 
filter.
3.
If Q > ½, the system is called Under Damped having a high-quality factor. 
Such a system oscillates at a frequency near the cutoff frequency known as 
peak frequency. There is a huge gain at peak frequency because of the system 
oscillation.
Filters
FREQUENCY RESPONSE
Frequency response graph for each of the above-mentioned condition is given 
below.
Under damped condition with fc = 106 Hz, A = 2.98 = 9.48 db, Q = 50.
The value of the components are, Resistor R1 = R2 = 10 KΩ, capacitor C1 = C2 = 150 
nF. Ra = 10 KΩ, Rb = 19.8 KΩ
Filters
The response shows the system is oscillating at the near cutoff frequency with a 
huge gain.
Critically damped condition with fc = 106 Hz, A = 1 = 0db, Q = 1/2.
The value of the components are, Resistor R1 = R2 = 10 KΩ, capacitor C1 = C2 = 150 
nF. Ra = 0 Ω, Rb = 0 Ω
Filters
This system response shows a 2nd order filter with 40db/decade or 
12db/octave roll-off rate with fc at -6db gain.
Over damped condition with fc = 355 Hz, A = 2 ≈ 6db, Q = 1/10.
The value of the components are, Resistor R1 = 1KΩ, R2 = 10 KΩ, capacitor C1 = 
C2 = 150 nF. Ra = 10 KΩ, Rb = 10 KΩ
Filters
The Overdamped system’s frequency response does not have the steep curve like 
a 2nd order filter supposed to have. It’s Cutoff frequency fc, which is 355 Hz lies at -
4.47 dB instead of 0 dB (A – 6db).
Filters
ADC & DAC
Cyrel Ontimare Manlises
ADC & DAC
ANALOG TO DIGITAL CONVERSION is the process by 
which analog signals are converted to their digitized 
forms.
ADC occurs via three steps:
a. SAMPLING
b. QUANTIZATION
c. ENCODING
ADC & DAC
WHAT IS SAMPLING?
✓The analog signal is sampled at regular intervals of 
time.
✓The sampling rate must be at least twice the highest 
frequency of the signal (Nyquist Criterion)
SOURCE: https://slideplayer.com/slide/3252260/
ADC & DAC
WHAT IS QUANTIZATION?
✓It is defined as the process of converting the 
continuous sample amplitude into a discrete 
amplitude. Thus by then, the signal will be discrete 
in both: time and amplitude.
SOURCE: https://slideplayer.com/slide/3252260/
ADC & DAC
WHAT IS QUANTIZATION ERROR?
✓The difference between the actual analog value and 
quantized digit value.
SOURCE: https://slideplayer.com/slide/3252260/
ADC & DAC
WHAT IS ENCODING?
✓It is the process which assigns ones and zeros 
(stream of bits) for every quantization level.
✓The number of bits assigned for each level (n) 
depends on the levels’ number (L); such that L=2n
ADC & DAC
WHAT IS IDEAL ADC?
✓The resolution of the ADC is the smallest detectable 
change in voltage.
✓In an ideal analog-to-digital converter, the 
quantization error is uniformly distributed between 
–Δ/2 and Δ/2.
Q = Δ = quantization step = full scale/level’s number
ADC & DAC
TYPES OF ADCs
✓There are many types of ADCs such as:
1. Direct conversion  ADC
2. Successive approximation register (SAR) ADC
3. Integrating ADCs: single slope, dual slop, and ramp 
ADC
4. Sigma-Delta ADC (over sampled ADC)
ADC & DAC
SAR ADC
✓It is one of the most popular ADCs for 8-16 bits
✓It has moderate conversion speeds. The conversion 
time is around 1µs.
✓It doesn’t consume a lot of power and its cost is low 
in comparison with the other types.
✓It requires a sample, hold circuit, and it can have 
missing output codes.
ADC & DAC
SOURCE: https://slideplayer.com/slide/3252260/
ADC & DAC
DESCRIPTION OPERATION
✓A successive approximation ADC works by using a digital to 
analog converter (DAC) and a comparator to perform a binary 
search to find the input voltage.
✓A sample and hold circuit (S&H) is used to sample the analog 
input voltage and hold (e.g. keep a non-charging copy) the 
sampled value whilst the binary search is performed.
✓The binary search starts with the most significant bit (MSB) 
and works towards the least significant bit (LSB). For an 8-bit 
output resolution, 8 comparisons are needed in the binary 
search, taking a least 8 cycles.
ADC & DAC
DESCRIPTION OPERATION
✓The binary search starts with the most significant bit (MSB) 
and works towards the least significant bit (LSB). For an 8-bit 
output resolution, 8 comparisons are needed in the binary 
search, taking a least 8 cycles.
✓The sample and hold circuit samples the analog input on a 
rising edge of the sample signal. The comparator output is a 
logic 1 if the sampled analog voltage is greater than the 
output of the DAC, 0 otherwise.
ADC & DAC
EXAMPLE:
Vref=5V,  Vs=3.127V,  4-bits.(b1b2b3b4)
1.
Set b1=1 all b2b3b4=000 >> 1000
Vdac=8*5/(2^4)=2.5V
(Vdac=2.5)>(Vs=3.127) No!!
b1=1
2.  Set b2=1 all b3b4=00 >> 1100
Vdac=12*5/(2^4)=3.75V
(Vdac=3.75)>(Vs=3.127) Yes
b2=0
3.  Set b3=1 b4=0 >> 1010
Vdac=10*5/(2^4)=3.125V
(Vdac=3.125)>(Vs=3.127) No!!
b3=1
4.  Set b4=1 >>1011
Vdac=11*5/(2^4)=3.4375V
(Vdac=3.4375)>(Vs=3.127) Yes
b4=0
Final Result=1010
ADC & DAC
DIGITAL TO ANALOG CONVERSION (DAC)
✓Is the device which converts digital signals to analog ones.
✓Most of DACs consist of a network of resistors and analog 
switches.
✓The switches control the currents or voltages that are derived 
from a particular reference voltage and provide analog 
output current.
SOURCE: https://slideplayer.com/slide/3252260/
ADC & DAC
TYPES OF DACs
✓There are many types of DACs such as:
1. Weighted resistor DAC
2. R-2R DAC
3. General purpose DAC (DAC 0800)
4. Frequency to voltage converter
5. Pulse width modulation
ADC & DAC
R-2R DAC
✓
The block diagram of R-2R DAC is as shown below.
✓
The analog output is given by the following equation
✓
The highest resistance value is 2R and thus requires an area inside the IC less 8 
times than that of the weighted resistor DAC which highest resistance is 16R.
SOURCE: https://slideplayer.com/slide/3252260/
ADC & DAC
R-2R DAC
✓
The DAC analog output is represented by current. This current is the ratio of the 
input code to the full scale voltage (Vref) as given in the following equation:
✓
The analog output is given by the following equation
✓
An operational amplifier is needed to convert the current to voltage level.
SOURCE: https://slideplayer.com/slide/3252260/
ADC & DAC
THE GENERAL PURPOSE (DAC 0800)
✓
The block diagram of DAC 0800 is a shows below.
✓
It is clear that is is an 8-bit DAC with 16 pins IC.
✓
The conversion time is around 100ns.
SOURCE: https://slideplayer.com/slide/3252260/
ADC & DAC
BIPOLAR/UNIPORAL DACs
✓
For unipolar DACs, the output voltage is given by
✓
For bipolar DACs, the output voltage is given by
SOURCE: https://slideplayer.com/slide/3252260/
ADC & DAC
TYPES OF ADC ERRORS
1. Offset Error
2. Gain Error
3. Nonlinearity Error
4. Temperature-dependent Error
5. Load-dependent Error
6. Hysteresis Error
7. Resolution Error
8. Missing code Error
ADC & DAC
OFFSET ERROR
✓
Constant component of the error that is independent of the inputs
Offset
Xin
Xout
SOURCE: https://slideplayer.com/slide/4468736/
ADC & DAC
GAIN ERROR
✓
Difference between the actual transfer ratio and the ideal ratio
✓
It is also called CALIBRATION ERROR
Xin
Xout
SOURCE: https://slideplayer.com/slide/4468736/
ADC & DAC
NONLINEARITY ERROR
✓
The deviation of the output quantity from a specified linear reference
Xin
Xout
SOURCE: https://slideplayer.com/slide/4468736/
ADC & DAC
NONLINEARITY ERROR
✓
INTEGRAL NONLINEARITY 
Worst-case deviation from 
the ideal transfer 
characteristic curve
✓
DIFFERENTIAL 
NONLIEARITY Difference 
between the actual transfer 
ratio and the ideal ratio
IN = 2 LSB
DN = 0.5 LSB
SOURCE: https://slideplayer.com/slide/4468736/
ADC & DAC
TEMPERATURE-DEPENDENT ERROR
✓
Change in ambient temperature or temperature variation due to self-heating 
(temperature stability, temperature coefficient)
Xin
Xout
T 3
T 2
T1
SOURCE: https://slideplayer.com/slide/4468736/
ADC & DAC
LOAD ERROR
✓
Is due to the effect of a load impedance upon the converter or signal source 
driving it.
Xin
Xout
RL1
RL2
RL1
RL1
SOURCE: https://slideplayer.com/slide/4468736/
ADC & DAC
HYSTERESIS ERROR
✓
The difference between the increasing and decreasing input values that produce 
the same output
Xin
Xout
SOURCE: https://slideplayer.com/slide/4468736/
ADC & DAC
RESOLUTION ERROR
✓
The error due to the inability to respond to change of a variable smaller than a 
given increment
Xin
Xout
SOURCE: https://slideplayer.com/slide/4468736/
ADC & DAC
Missing Codes
Ideal Input Waveform
Quantized with missing Code
Quantization Error
RESOLUTION ERROR
SOURCE: https://slideplayer.com/slide/4468736/
Introduction to 
Real-Time 
Embedded Systems
Cyrel Ontimare Manlises
Real-Time 
Embedded Systems
TOPIC OBJECTIVES:
1.
Definition of Real-Time Embedded Systems
2.
Types of Real-Time Embedded Systems
3.
Classifications of Real-Time Embedded Systems
4.
Design Patterns of Real-Time Embedded Systems
5.
Architecture Design Design Patterns of Real-Time Embedded Systems
6.
Examples of Real-Time Embedded Systems
SOURCE:
Real-Time 
Embedded Systems
SOURCE:
What is Real-Time Embedded Systems?
A real-time embedded system combines the technologies of embedded systems and 
real-time computing. To achieve the most complete and accurate description, we 
begin with a deeper look at the defining features of these technologies.
Real-time embedded systems are those that incorporate a real-time operating 
system, ensuring that the device can respond to sensory inputs within the time 
constraints specified by the embedded software. Real-time embedded systems are 
further classified based on the type of real-time response they provide.
Real-Time 
Embedded Systems
SOURCE:
Embedded Systems
are hardware-and-software computer systems that perform a dedicated function 
with a larger system or device. An embedded system typically consists of a 
microcontroller, also called a computer-on-a-chip. Microcontrollers are equipped 
with a CPU, memory (RAM and ROM), I/O ports, a communication bus, 
timers/counters, and DAC/ADC converters.
Real-Time 
Embedded Systems
SOURCE:
Characteristics of Embedded Systems
1. Embedded systems are application-specific. While a general-purpose 
computer could run any compatible application of the user's choosing, an 
embedded device is programmed and optimized to run one specific 
application that satisfies its real world function.
Real-Time 
Embedded Systems
SOURCE:
Characteristics of Embedded Systems
2. Embedded systems do not always have a user interface. A general-
purpose computer incorporates a user interface where a user can input 
instructions or otherwise interact with the system.  An embedded system is 
often hidden inside a device such that the user does not interact directly 
with the embedded system itself. Embedded systems typically receive input 
from sensors or a connected data source instead of directly from the user.
Real-Time 
Embedded Systems
SOURCE:
Characteristics of Embedded Systems
3. Embedded systems are hardware and software. An embedded device 
consists of a software application that delivers a specific function or service, 
along with the necessary hardware to run the application in the live 
environment. The core challenge of embedded systems design is to create a 
product that solves the problem while meeting strategic and business 
requirements for product size, power consumption, and unit cost.
Real-Time 
Embedded Systems
SOURCE:
What is Real-Time Computing?
A real-time embedded system combines the technologies of embedded 
systems and real-time computing. To achieve the most complete and 
accurate description, we begin with a deeper look at the defining features of 
these technologies.
Real-Time 
Embedded Systems
SOURCE:
Types of Embedded Systems
1. General Purpose Operating System (GPOS) - A GPOS is the software layer 
that sits between the hardware and the application in an embedded system. 
GPOS consists of the kernel, memory management, networking, and other 
services that are provided to the application. A GPOS is used in cases where 
tasks are not time-sensitive and computing power is valued more highly 
than rapid response times.
Real-Time 
Embedded Systems
SOURCE:
Types of Embedded Systems
2. Real-Time Operating System (RTOS) -  An RTOS is used for embedded 
systems applications that are time-sensitive or time-critical. A time-critical 
task is defined as one where the task must be performed within specified 
time constraints to avoid negatively impacting users. In a time-critical 
system, the value of completing a task is linked to its timeliness and tasks 
that are completed past the deadline may have a negative value. RTOS 
includes a task scheduler component whose goal is to ensure that critical 
tasks meet their deadline, even when it means sacrificing other areas of 
performance.
Real-Time 
Embedded Systems
SOURCE:
Classifications of Real-Time Embedded Systems?
1. Hard RTOS - A hard RTOS is implemented when it is crucial 
that no deadlines are missed and all tasks are completed within 
the prescribed time frame. In a hard RTOS, delays in the system 
are strictly time-bound to ensure that deadlines are met at a 
100% rate and any missed deadline is considered a system 
failure.
Real-Time 
Embedded Systems
SOURCE:
Classifications of Real-Time Embedded Systems?
2. Firm RTOS - In a firm RTOS, errors are occasionally 
permissible but there is an understanding that missed deadlines 
result in degraded performance of the device. A device using a 
firm RTOS may occasionally miss a deadline, but the application 
can recover as long as failures are relatively infrequent.
Real-Time 
Embedded Systems
SOURCE:
Classifications of Real-Time Embedded Systems?
3. Soft RTOS - In a soft RTOS, user experience is optimized when 
tasks are completed on-time but performance is not totally 
degraded when deadlines are missed. Consider a video game 
console that runs a game engine: it must schedule tasks and 
complete them on time for the game to run smoothly, but a 
little bit of lag or an occasional hiccup in performance does not 
necessarily 
ruin 
the 
experience 
for 
the 
player.  
Real-Time 
Embedded Systems
SOURCE:
Real-Time Embedded Systems Design Patterns
A design pattern describes a repeatable solution to a problem 
that commonly occurs when designing a specific type of device. 
The pattern acts as a description of how an engineer can solve a 
specific problem, a framework taken from a solution to a similar 
problem. Design patterns help embedded systems engineers 
avoid reinventing the wheel as they develop their products, 
limiting their total debug time and reducing overall time-to-
market.
Real-Time 
Embedded Systems
SOURCE:
Object Design Patterns
1. Manager Design Pattern - The manager object can be implemented to 
keep track of multiple entities in embedded systems applications where the 
system must support several entities of the same or similar type.
2. Resource Manager Pattern - This design pattern can be used to 
implement a centralized resource manager for multiple resources of the 
same type.
3. Half Call Design Pattern - This design pattern is used for implementations 
that require interactions between more than one communication protocol.
Real-Time 
Embedded Systems
SOURCE:
Protocol Design Patterns
1. Protocol Stack Design Pattern - This design pattern can be used to 
implement a layered protocol and provides for dynamic insertion and 
removal of protocol layers within the stack.
2. Protocol Layer Design Pattern - This design pattern is used to decouple 
protocol layers and reduce dependencies between layers of the protocol 
stack.
3. Protocol Packet Design Pattern - This design pattern offers a simplified 
buffering architecture for real-time embedded systems, implementing a 
single buffer that supports addition and extraction of the various protocol 
layers.
Real-Time 
Embedded Systems
SOURCE:
Architecture Design Patterns
1.
Processor Architecture Patterns- There are many possible architectures 
for real-time embedded systems that have been documented as a 
design pattern. Each architecture design pattern specifies its own 
processes and modules along with the corresponding roles and 
responsibilities. Some available options include:
✓
Operations & Maintenance Processor Architecture
✓
Central Manager Architecture
✓
Module Manager Architecture
✓
Device Controller Architecture
Real-Time 
Embedded Systems
SOURCE:
Architecture Design Patterns
2. Feature Coordination Pattern - In real-time embedded 
systems design, each task should include a feature coordinator. 
Feature coordination ensures that a feature does not fail to 
complete a result of packet loss or task failure. Feature 
coordination also helps embedded systems recover after a 
request time-out.
Real-Time 
Embedded Systems
SOURCE:
Architecture Design Patterns
3. Timer Management Design Patterns - Timer management is 
a key feature of real-time embedded systems. Timer 
management design patterns are used frequently to address 
the requirements of real-time embedded devices. They include 
patterns for failure detection, message loss and fault recovery 
sequences, inactivity detection, sequencing operations, and 
other features that ensure tasks are completed by the specified 
deadline.
Real-Time 
Embedded Systems
SOURCE:
Real-Time Embedded Systems Examples
Introduction to 
Real-Time 
Embedded Systems
Cyrel Ontimare Manlises
Real-Time 
Embedded Systems
TOPIC OBJECTIVES:
1.
Basic concepts and misconceptions
2.
Multidisciplinary design challenges
3.
Birth and evolution of real-time systems
SOURCE: https://slideplayer.com/slide/9343197/
Real-Time 
Embedded Systems
SOURCE:
Real-Time 
Embedded Systems
Real-Time 
Embedded Systems
SOURCE:
Real-Time 
Embedded Systems
Real-Time 
Embedded Systems
Real-Time 
Embedded Systems
Real-Time 
Embedded Systems
Real-Time 
Embedded Systems
Real-Time 
Embedded Systems
Real-Time 
Embedded Systems
Real-Time 
Embedded Systems
Real-Time 
Embedded Systems
Real-Time 
Embedded Systems
Real-Time 
Embedded Systems
Real-Time 
Embedded Systems
Real-Time 
Embedded Systems
Real-Time 
Embedded Systems
Real-Time 
Embedded Systems
Real-Time 
Embedded Systems
Real-Time 
Embedded Systems
Real-Time 
Embedded Systems
Real-Time 
Embedded Systems
Real-Time 
Embedded Systems
Real-Time 
Embedded Systems
Real-Time 
Embedded Systems
Real-Time 
Embedded Systems
Real-Time 
Embedded Systems
Real-Time 
Embedded Systems
Real-Time 
Embedded Systems
Real-Time 
Embedded Systems
Real-Time 
Embedded Systems
Real-Time 
Embedded Systems
Real-Time 
Embedded Systems
Real-Time 
Embedded Systems
Real-Time 
Embedded Systems
Embedded System 
Design 
with
Statecharts
Cyrel Ontimare Manlises
Statecharts
Statecharts
Statecharts
Statecharts
Statecharts
Statecharts
Statecharts
Statecharts
Statecharts
Statecharts
Statecharts
Statecharts
Statecharts
Statecharts
Statecharts
Statecharts
Statecharts
Statecharts
Statecharts
Statecharts
Statecharts
Statecharts
Statecharts
Statecharts
Statecharts
Statecharts
Statecharts
Statecharts
Embedded System 
Design 
with
Petrinets
Cyrel Ontimare Manlises
Petrinets
Petrinets
Petrinets
Petrinets
Petrinets
Petrinets
Petrinets
Petrinets
Petrinets
Petrinets
Petrinets
Petrinets
Petrinets
Petrinets
Petrinets
Petrinets
Petrinets
Petrinets
Petrinets
Petrinets
Petrinets
Petrinets
Petrinets
Petrinets
Petrinets
Petrinets
Petrinets
Petrinets
Petrinets
Petrinets
Petrinets
Petrinets
Petrinets
Petrinets
Petrinets
Petrinets
Petrinets
Petrinets
Reference:
https://www.react.uni-saarland.de/teaching/embedded-systems-08-09/downloads/lec4b.pdf
Embedded Systems 
with IoT
Cyrel Ontimare Manlises
Embedded Systems with IoT
TOPIC OBJECTIVES:
1.
To be able to  understand the definition of IoT.
2.
To be able to explore various components used in IoT.
3.
To be able to learn the different ways of building IoT.
4.
To be able to understand the IoT Enablers.
5.
To be able to understand the characteristics of IoT.
6.
To be able to explore the physical design of IoT.
Embedded Systems with IoT
What is Internet of Things (IoT)?
is the networking of physical objects that contain electronics embedded within their 
architecture in order to communicate and sense interactions amongst each other or 
with respect to the external environment. 
In the upcoming years, IoT-based technology will offer advanced levels of services 
and practically change the way people lead their daily lives. Advancements in 
medicine, power, gene therapies, agriculture, smart cities, and smart homes are just 
a very few of the categorical examples where IoT is strongly established.
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Embedded Systems with IoT
Four main components used in IoT.
1. Low-power embedded systems
Less battery consumption, high performance is the inverse 
factors play a significant role during the design of electronic 
systems.
2. Cloud computing
Data collected through IoT devices is massive and this data 
has to be stored on a reliable storage server. This is where 
cloud computing comes into play. The data is processed and 
learned, giving more room for us to discover where things 
like electrical faults/errors are within the system.
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Embedded Systems with IoT
Four main components used in IoT.
3. Availability of big data
We know that IoT relies heavily on sensors, especially real-time. As 
these electronic devices spread throughout every field, their usage is 
going to trigger a massive flux of big data.
4. Networking Connection
In order to communicate, internet connectivity is a must where each 
physical object is represented by an IP address. However, there are only 
a limited number of addresses available according to the IP naming. Due 
to the growing number of devices, this naming system will not be 
feasible anymore. Therefore, researchers are looking for another 
alternative naming system to represent each physical object.
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Embedded Systems with IoT
Ways of Building IoT
1. Form a separate internetwork including only physical objects.
2. Make the Internet ever more expansive, but this requires 
hard-core technologies such as rigorous cloud computing and 
rapid big data storage (expensive).
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Embedded Systems with IoT
IoT Enablers
1. RFIDs: uses radio waves in order to electronically track the tags attached to each 
physical object.
2. Sensors: devices that are able to detect changes in an environment (ex: motion 
detectors).
3. Nanotechnology: as the name suggests, these are extremely small devices with 
dimensions usually less than a hundred nanometers.
4. Smart Networks: (ex: mesh topology).
 
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Embedded Systems with IoT
Characteristics of IoT
1.
Interconnectivity: With regard to the IoT, anything can be 
interconnected with the global information and communication 
infrastructure.
2.
Things-related services: The IoT is capable of providing thing-related 
services within the constraints of things, such as privacy protection and 
semantic consistency between physical things and their associated 
virtual things. In order to provide thing-related services within the 
constraints of things, both the technologies in physical world and 
information world will change.
3.
Heterogeneity: The devices in the IoT are heterogeneous as based on 
different hardware platforms and networks. They can interact with 
other devices or service platforms through different networks.
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Embedded Systems with IoT
Characteristics of IoT
4.
Dynamic changes: The state of devices change dynamically, e.g., 
sleeping and waking up, connected and/or disconnected as well as the 
context of devices including location and speed. Moreover, the number 
of devices can change dynamically.
5.
Enormous scale: The number of devices that need to be managed and 
that communicate with each other will be at least an order of 
magnitude larger than the devices connected to the current Internet. 
Even more critical will be the management of the data generated and 
their interpretation for application purposes. This relates to semantics 
of data, as well as efficient data handling.
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Embedded Systems with IoT
Characteristics of IoT
6.
Safety: As we gain benefits from the IoT, we must not forget about 
safety. As both the creators and recipients of the IoT, we must design for 
safety. This includes the safety of our personal data and the safety of 
our physical well-being. Securing the endpoints, the networks, and the 
data moving across all of it means creating a security paradigm that will 
scale.
7.
Connectivity: 
Connectivity 
enables 
network 
accessibility 
and 
compatibility. Accessibility is getting on a network while compatibility 
provides the common ability to consume and produce data.
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Embedded Systems with IoT
Physical Design of IoT
1. Things in IoT
•
Refers to IoT devices which have unique identities that 
can 
perform 
sensing, 
actuating 
and 
monitoring 
capabilities.
•
IoT devices can exchange data with other connected 
devices or collect data from other devices and process 
the data either locally or send the data to centralized 
servers or cloud – based application back-ends for 
processing the data.
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Embedded Systems with IoT
Physical Design of IoT
1. Things in IoT
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Embedded Systems with IoT
Physical Design of IoT
1. Things in IoT
•
An IoT device may consist of several interfaces for 
connections to other devices, both wired and wireless.
•
I/O interfaces for sensors
•
Interfaces for internet connectivity
•
Memory and storage interfaces
•
Audio/video interfaces
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Embedded Systems with IoT
Physical Design of IoT
2. IoT Protocols
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Embedded Systems with IoT
Physical Design of IoT
2. IoT Protocols
✓Link Layer : Protocols determine how data is physically 
sent over the network‗s physical layer or medium. Local 
network connect to which host is attached. Hosts on the 
same link exchange data packets over the link layer using 
link layer protocols. Link layer determines how packets 
are coded and signaled by the h/w device over the 
medium to which the host is attached.
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Embedded Systems with IoT
Physical Design of IoT
2. IoT Protocols
Protocols: 
•
802.3-Ethernet: IEEE802.3 is collection of wired Ethernet standards for the link layer. Eg: 
802.3 uses co-axial cable; 802.3i uses copper twisted pair connection; 802.3j uses fiber optic 
connection; 802.3ae uses Ethernet over fiber. 
•
802.11-WiFi: IEEE802.11 is a collection of wireless LAN(WLAN) communication standards 
including extensive description of link layer. Eg: 802.11a operates in 5GHz band, 802.11b and 
802.11g operates in 2.4GHz band, 802.11n operates in 2.4/5GHz band, 802.11ac operates in 
5GHz band, 802.11ad operates in 60Ghzband. 
•
802.16 - WiMax: IEEE802.16 is a collection of wireless broadband standards including 
exclusive description of link layer. WiMax provide data rates from 1.5 Mb/s to 1Gb/s. 
•
802.15.4-LR-WPAN: IEEE802.15.4 is a collection of standards for low rate wireless personal 
area network(LR-WPAN). Basis for high level communication protocols such as ZigBee. 
Provides data rate from 40kb/s to250kb/s. 
•
2G/3G/4G-Mobile Communication: Data rates from 9.6kb/s(2G) to up to100Mb/s(4G).
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Embedded Systems with IoT
Physical Design of IoT
2. IoT Protocols
✓Network/Internet Layer: Responsible for sending IP 
datagrams from source n/w to destination n/w. Performs 
the host addressing and packet routing. Datagrams 
contains source and destination address.
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Embedded Systems with IoT
Physical Design of IoT
2. IoT Protocols
Protocols: 
•
IPv4: Internet Protocol version4 is used to identify the devices on a n/w using a hierarchical 
addressing scheme. 32 bit address. Allows total of 2**32addresses.
•
IPv6: Internet Protocol version6 uses 128 bit address scheme and allows 2**128 addresses. 
•
6LOWPAN:(IPv6overLowpowerWirelessPersonalAreaNetwork)operates in 2.4 GHz frequency 
range and data transfer 250 kb/s. 
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Embedded Systems with IoT
Physical Design of IoT
2. IoT Protocols
✓Transport Layer: Provides end-to-end message transfer 
capability independent of the underlying n/w. Set up on 
connection with ACK as in TCP and without ACK as in 
UDP. 
Provides 
functions 
such 
as 
error 
control, 
segmentation, flow control and congestion control. 
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Embedded Systems with IoT
Physical Design of IoT
2. IoT Protocols
Protocols: 
•
TCP: Transmission Control Protocol used by web browsers(along with HTTP and HTTPS), 
email(along with SMTP, FTP). Connection oriented and stateless protocol. IP Protocol deals 
with sending packets, TCP ensures reliable transmission of protocols in order. Avoids n/w 
congestion and congestion collapse.
•
UDP: User Datagram Protocol is connectionless protocol. Useful in time sensitive 
applications, very small data units to exchange. Transaction oriented and stateless protocol. 
Does not provide guaranteed delivery. 
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Embedded Systems with IoT
Physical Design of IoT
2. IoT Protocols
✓Application Layer: Defines how the applications interface 
with lower layer protocols to send data over the n/w. 
Enables process-to-process communication using ports.
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Embedded Systems with IoT
Physical Design of IoT
2. IoT Protocols
Protocols: 
•
HTTP: Hyper Text Transfer Protocol that forms foundation of WWW. Follow requestresponse 
model Stateless protocol. 
•
CoAP: Constrained Application Protocol for machine-to-machine (M2M) applications with 
constrained devices, constrained environment and constrained n/w. Uses clientserver 
architecture.
•
WebSocket: allows full duplex communication over a single socket connection. 
•
MQTT: Message Queue Telemetry Transport is light weight messaging protocol based on 
publish-subscribe model. Uses client server architecture. Well suited for constrained 
environment. 
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Embedded Systems with IoT
Physical Design of IoT
2. IoT Protocols
Protocols: 
•
XMPP: Extensible Message and Presence Protocol for real time communication and 
streaming XML data between network entities. Support client-server and server-server 
communication. 
•
DDS: Data Distribution Service is data centric middleware standards for device-to-device or 
machine-to-machine communication. Uses publish-subscribe model. 
•
AMQP: Advanced Message Queuing Protocol is open application layer protocol for business 
messaging. Supports both point-to-point and publish-subscribe model. 
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Embedded Systems with IoT
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Enabling
Technologies
Cyrel Ontimare Manlises
IoT Enabling Technologies
TOPIC OBJECTIVES:
1.
To be able to explore various IoT enabling technologies.
2.
To be able to understand Embedded systems
IoT Enabling Technologies
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
1. Wireless Sensor Networks
A wireless sensor network comprises of distributed device with sensor which are used to 
monitor the environmental and physical conditions. A WSN consists of a number of end-nodes 
and routers and a coordinator. End Nodes have several sensors attached to them in node can 
also act as routers. Routers are responsible for routing the data packets from end-nodes to the 
coordinator. The coordinator collects the data from all the nodes. Coordinator also acts as a 
gateway that connects the WSN to the internet. 
Some examples of WSNs used in IoT systems are described as follows: 
•
Weather monitoring system use WSNs in which the nodes collect temperature humidity and other data 
which is aggregated and analyzed.
•
Indoor air quality monitoring systems use WSNs to collect data on the indoor air quality and 
concentration of various gases.
•
Soil moisture monitoring system use WSNs to monitor soil moisture at various locations.
•
Surveillance system use WSNs for collecting Surveillance data (such as motion detection data).
•
Smart grid use WSNs for monitoring the grid at various points.
•
Structural health monitoring system use WSNs to monitor the health of structures (buildings, bridges) by 
collecting vibration data from sensor nodes de deployed at various points in the structure.
IoT Enabling Technologies
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
2. Cloud Computing
Cloud computing is a trans-formative computing paradigm that involves delivering applications 
and services over the Internet Cloud computing involves provisioning of computing, networking 
and storage resources on demand and providing these resources as metered services to the 
users, in a “pay as you go” model. C loud computing resources can be provisioned on demand 
by the users, without requiring interactions with the cloud service Provider. The process of 
provisioning resources is automated. Cloud computing resources can be accessed over the 
network using standard access mechanisms that provide platform independent access through 
the use of heterogeneous client platforms such as the workstations, laptops, tablets and smart 
phones. 
Cloud computing services are offered to users in different forms: 
•
Infrastructure as a Service (IaaS): hardware is provided by an external provider and managed for you.
•
Platform as a Service (PaaS): in addition to hardware, your operating system layer is managed for you.
•
Software as a Service (SaaS): further to the above, an application layer is provided and managed for you 
– you won’t see or have to worry about the first two layers.
IoT Enabling Technologies
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
3. Big Data Analytics
Big Data analytics is the process of collecting, organizing and analyzing large sets of data (called 
Big Data) to discover patterns and other useful information. Big Data analytics can help 
organizations to better understand the information contained within the data and will also help 
identify the data that is most important to the business and future business decisions. Analysts 
working with Big Data typically want the knowledge that comes from analyzing the data. 
Some examples of big data generated by IoT systems are described as follows: 
•
Sensor data generated by IoT system such as weather monitoring stations.
•
Machine sensor data collected from sensors embedded in industrial and energy systems for 
monitoring their health and detecting Failures.
•
Health and fitness data generated by IoT devices such as wearable fitness bands.
•
Data generated by IoT systems for location and tracking of vehicles.
•
Data generated by retail inventory monitoring systems.
IoT Enabling Technologies
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
3. Big Data Analytics
Characteristics
Big data can be described by the following characteristics: 
•
Volume: The quantity of generated and stored data. The size of the data determines the 
value and potential insight and whether it can be considered big data or not.
•
Variety: The type and nature of the data. This helps people who analyze it to effectively use 
the resulting insight. Big data draws from text, images, audio, video; plus it completes 
missing pieces through data fusion.
•
Velocity: In this context, the speed at which the data is generated and processed to meet 
the demands and challenges that lie in the path of growth and development. Big data is 
often available in real-time. Compared to small data, big data are produced more 
continually. Two kinds of velocity related to Big Data are the frequency of generation and the 
frequency of handling, recording, and publishing.
•
Veracity: It is the extended definition for big data, which refers to the data quality and the 
data value. The data quality of captured data can vary greatly, affecting the accurate analysis.
IoT Enabling Technologies
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
4. Communication Protocols
•
Communication protocols form the backbone of IoT systems and enable network 
connectivity and coupling to applications. Communication protocols allow devices to 
exchange data over the network. Multiple protocols often describe different aspects of a 
single communication. A group of protocols designed to work together are known as a 
protocol suite; when implemented in software they are a protocol stack. 
•
Internet communication protocols are published by the Internet Engineering Task Force 
(IETF). The IEEE handles wired and wireless networking, and the International Organization 
for Standardization (ISO) handles other types. The ITU-T handles telecommunication 
protocols and formats for the public switched telephone network (PSTN). As the PSTN and 
Internet converge, the standards are also being driven towards convergence.
IoT Enabling Technologies
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Embedded Systems:
As its name suggests, Embedded means something that is attached to another thing. An 
embedded system can be thought of as a computer hardware system having software 
embedded in it. An embedded system can be an independent system, or it can be a part of a 
large system. An embedded system is a controller programmed and controlled by a real-time 
operating system (RTOS) with a dedicated function within a larger mechanical or electrical 
system, often with real-time computing constraints. It is embedded as part of a complete device 
often including hardware and mechanical parts. Embedded systems control many devices in 
common use today. Ninety-eight percent of all microprocessors are manufactured to serve as 
embedded system component. 
An embedded system has three components:
•
It has hardware.
•
It has application software.
•
It has Real Time Operating system (RTOS) that supervises the application software and provide 
mechanism to let the processor run a process as per scheduling by following a plan to control the 
latencies. RTOS defines the way the system works. It sets the rules during the execution of application 
program. A small-scale embedded system may not have RTOS .
Embedded System :  Internet 
of Things
Jocelyn Flores Villaverde, PhD
Embedded Systems
What is an embedded 
system?
It is a combination of 
hardware and 
software capable of 
performing a 
dedicated task.
Applications of 
Embedded 
Systems
https://www.sam-solutions.com/blog/all-you-need-to-know-
about-embedded-system-programming/
Block Diagram of Embedded 
Systems
Embedded System
A microcontroller is a self contained fully 
functional computer with built in peripherals.
The idea of a microcontroller is that it can stand 
alone and does not require any other circuitry 
to do a useful task.
Embedded System
: Atmega 
Embedded 
System
Raspberry Pi is single-board 
computers with set of GPIO 
(general purpose input/output) 
pins that allow you to control 
electronic components for 
physical computing and explore 
the Internet of Things (IoT).
Embedded System
ARDUINO FOR EMBEDDED DESIGN
•Open-Source Prototyping Platform.
Introductory Software for first-time 
learners of Embedded Systems.
C Language Syntax
Internet of Things
The Internet of Things 
consists of objects with 
embedded or attached 
technologies that enable 
them to sense data, 
collect them and send 
them for a specific 
purpose
Internet of Things
https://cdn-images-
1.medium.com/max/1600/1*ck9_cs-
g08kFCUXrYgwV2w.png
is a system of interrelated computing devices, 
mechanical and digital machines, objects, animals 
or people that are provided with unique identifiers 
(UIDs) and the ability to transfer data over a 
network without requiring human-to-human or 
human-to-computer interaction.
Why should the components communicate with each other? 
What actually is the need to do so?
Overview of the 
ESP8266 WiFi Module
ESP8266
The ESP8266 is a really useful, cheap WiFi module for controlling devices over the Internet. It 
can work with a micro-controller like the Arduino or it can be programmed to work on its own.
The Internet of Things (IoT) has just been made a whole lot cheaper and easier!
The ESP8266 comes with factory installed firmware allowing you to control it with standard “AT 
commands”. You can also easily create and upload your own code and this makes it hugely 
powerful and flexible.
ESP8266
ESP8266 (technically ESP8266EX) is a WiFi Module based on Cadence Tensilica L106 32-bit MCU 
manufactured by Espressif Systems. The ESP8266 SoC contains a fully functional WiFi Stack and 
TCP/IP Stack that allows any Microcontroller to get connected to WiFi Network.
https://www.electronicshub.org/esp8266-arduino-interface/
ESP8266
Pin Configuration
Pin Description of ESP8266 ESP-01 Module
•VCC: It is the power pin through which 3.3V is supplied.
•GND: It is the ground pin.
•TX: This pin is used to transmit serial data to other 
devices.
•RX: The RX pin is used to receive serial data from other 
devices.
•RST: It is the Reset Pin and it is an active LOW Pin. 
(ESP8266 will reset if the RST pin receives LOW signal).
•CH_PD: This is the chip enable pin and it is an active 
HIGH Pin. It is usually connected to 3.3V.
•GPIO0: The GPIO0 (General Purpose I/O) Pin has dual 
functions – one for normal GPIO Operation and other for 
enabling the Programming Mode of ESP8266.
•GPIO2: This is GPIO Pin.
IMPORTANT NOTE: The ESP8266 is not compatible with 5V 
and the ESP-01 Module does not have any voltage 
regulators on-board. Make sure that the power supply to 
the ESP8266 is 3.3V, preferably from a dedicated power 
supply rather than taking it from the 3.3V Pin of the Arduino.
Circuit Diagram of ESP8266 Arduino 
Interface
Getting Arduino IDE Ready for 
Programming ESP8266
Open Arduino IDE . First, 
go to File –> Preferences 
in the Arduino IDE and in 
the Additional Boards 
Manager URLs Section, 
enter the following URL.
http://arduino.esp8266.
com/stable/package_esp
8266com_index.json
NOTE: You can add many 
such URLs but they must be 
separated with commas.
Getting Arduino IDE Ready for 
Programming ESP8266
Now, go to Tools –> Board –> Boards Manager and search for ESP8266 in the search field. Select 
the ESP8266 by ESP8266 Community and click on Install.
Getting Arduino UNO Ready for 
Programming ESP8266
GPIO2 pin is connected to an LED to test the working of the program. All the necessary 
connections for enabling the Programming Mode in ESP8266 are mentioned below.
VCC – – > 3.3V
GND – – > GND
CH_PD – – > 3.3V
RST – – > Normally Open; GND to Reset
GPIO0 – – > GND
TX – – > TX of Arduino
RX – – > RX of Arduino (through level converter)
Working of ESP8266 Arduino Interface
Make sure that all the above mentioned 
connections are properly made. After 
connecting and configuring the ESP8266 in 
Programming Mode (GPIO0 is connected to 
GND), connect the Arduino to the system.
Once the ESP8266 Module is powered ON, 
Push the RST button and open the Arduino 
IDE. In the Board options (Tools –> Board), 
select the “Generic ESP8266” Board. Select 
the appropriate port number in the IDE.
Working of ESP8266 Arduino Interface
Now, open the Blink Sketch and change the LED Pin to 2. Here, 2 means GPIO2 pin of the 
ESP8266 Module. Before you hit the upload make sure that GPIO0 is connected to GND first and 
then press the RST button.
Working of ESP8266 Arduino Interface
Hit the upload button and the code will take a while to compile and upload. You can see the 
progress at the bottom of the IDE. Once the program is successfully uploaded, you can remove 
the GPIO0 from GND. The LED connected to GPIO2 will blink. 
Internet of Things
JOCELYN F. VILLAVERDE
Internet of 
Things
The Internet of Things consists of 
objects with embedded or attached 
technologies that enable them to sense 
data, collect them and send them for a 
specific purpose
Internet 
of Things
is a system of interrelated 
computing devices, mechanical 
and digital machines, objects, 
animals or people that are 
provided with unique identifiers 
(UIDs) and the ability to transfer 
data over a network without 
requiring human-to-human or 
human-to-computer interaction.
https://cdn-images-1.medium.com/max/1600/1*ck9_cs-g08kFCUXrYgwV2w.png
Internet of Things
ThingSpeak is an open cloud data platform where you can store and retrieve data.
The Internet of Things (IoT) in education includes data 
storage, processing, and data visualization. 
ThingSpeak™ has a simple interface that makes it easy to 
learn cloud analytics and teach IoT. Then use 
ThingSpeak communities to provide support for your 
cloud education curriculum. ThingSpeak also supports 
and integrates with Arduino®, RPI, and other hardware.
•See instant visualizations of data posted by your 
devices or equipment.
•Execute MATLAB® code in ThingSpeak, perform online 
analysis and data processing with live data, and see 
automatic visualizations.
•Build IoT systems without setting up servers or 
developing web software.
ThingSpeak
ThingSpeak™ is an IoT analytics platform service that allows you to aggregate, visualize and analyze live 
data streams in the cloud. ThingSpeak provides instant visualizations of data posted by your devices to 
ThingSpeak. With the ability to execute MATLAB® code in ThingSpeak you can perform online analysis and 
processing of the data as it comes in. ThingSpeak is often used for prototyping and proof of concept IoT 
systems that require analytics.
ThingSpeak Key Features
ThingSpeak allows you to aggregate, visualize and analyze live data streams in the cloud. Some of the key 
capabilities of ThingSpeak include the ability to:
Easily configure devices to send data to ThingSpeak using popular IoT protocols.
Visualize your sensor data in real-time.
Aggregate data on-demand from third-party sources.
Use the power of MATLAB to make sense of your IoT data.
Run your IoT analytics automatically based on schedules or events.
Prototype and build IoT systems without setting up servers or developing web software.
Automatically act on your data and communicate using third-party services like Twilio® or Twitter®.
ThingSpeak
Send sensor data 
privately to the cloud.
Analyze and visualize 
your data with MATLAB.
Trigger a reaction.
Send Data to 
ThingSpeak with 
Arduino
Arduino with network connectivity
Setup ThingSpeak
ThingSpeak requires a user account and 
a channel. A channel is where you send 
data and where ThingSpeak stores data. 
Each channel has up to 8 data fields, 
location fields, and a status field. You 
can send data every 15 seconds to 
ThingSpeak, but most applications work 
well every minute.
Send Data to ThingSpeak with Arduino
Install ThingSpeak Communication Library for Arduino
In the Arduino IDE, choose Sketch/Include Library/Manage Libraries. Click the ThingSpeak Library from the 
list, and click the Install button.
To include the library : choose Sketch --- Thingspeak
Another method : File --- Examples --- ThingSpeak
Send Data to ThingSpeak with Arduino
Setup Arduino Sketch
You will need to configure themyChannelNumber and myWriteAPIKey variables
unsigned long myChannelNumber = 31461;
const char * myWriteAPIKey = "LD79EOAAWRVYF04Y";
Send Data to ThingSpeak with Arduino
Send an Analog Voltage to ThingSpeak
The WriteSingleField Arduino sketch example reads an analog voltage from pin 0, and writes it to a channel 
on ThingSpeak every 20 seconds. Load the example in the Arduino IDE. Make sure to select the correct 
Arduino board and COM port. Then, upload the code to your Arduino.
Send Data to ThingSpeak with Arduino
Examples
The library includes several examples organized by board type to help you get started. These are accessible 
in Examples > ThingSpeak menu of the Arduino IDE.
ReadField: Reading from a public channel and a private channel on ThingSpeak.
WriteSingleField: Writing a value to a single field on ThingSpeak.
WriteMultipleFields: Writing values to multiple fields and status in one transaction with ThingSpeak.
Complete source code and examples for the ThingSpeak Library are available on GitHub.
.
Send Data to ThingSpeak with Arduino
MATLAB Visualization
Now that your data is on ThingSpeak you can see this data on ThingSpeak using the MATLAB Visualizations 
app. On ThingSpeak, select Apps and then MATLAB Visualizations. Click “New”, select “Custom (no starter 
code), and click “Create”.
Enter the following MATLAB code and click Run and Save:
readChannelID = 93156;
fieldID1 = 1;
readAPIKey = 'MCI6XM81ZFOY8UCE';
%% Read Data %%
data, time] = thingSpeakRead(readChannelID, 'Field', fieldID1, 'NumPoints', 10, 'ReadKey', readAPIKey);
%% Visualize Data %%
plot(time, data);
IoT Projects
ESP32 Based IoT Projects
ESP32 is a popular low-power system on chip microcontrollers with integrated Wi-Fi and dual-
mode Bluetooth, making it suitable for designing and prototyping IoT solutions. This section covers various 
basic tutorials and projects to start with ESP32 NodeMCU based IoT projects. These IoT projects covers a 
wide range of popular IoT projects and applications to learn and build interesting applications.
IoT Projects
ESP32 Based IoT Projects
ESP32 is a popular low-power system on chip microcontrollers with integrated Wi-Fi and dual-
mode Bluetooth, making it suitable for designing and prototyping IoT solutions. This section covers various 
basic tutorials and projects to start with ESP32 NodeMCU based IoT projects. These IoT projects covers a 
wide range of popular IoT projects and applications to learn and build interesting applications.
ESP8266 Based IoT Projects
ESP8266 is a Wi-Fi module with in-built microcontroller mainly used for making IoT applications due to its 
low cost and its compatibility with other microcontrollers. Below are some tutorials and projects to start 
with ESP8266 based IoT projects.
Resources
https://github.com/mathworks/thingspeak-arduino/tree/master/examples
https://github.com/mathworks/thingspeak-arduino
https://www.mathworks.com/support/search.html/videos/iot-data-explorer-for-thingspeak-and-matlab-
1597832862566.html?fq=asset_type_name:video%20category:thingspeak/index&page=1
https://www.youtube.com/watch?v=4Mi-hDa8e-4
https://www.youtube.com/watch?v=2tCOMeBYs30
IoT Levels
Cyrel Ontimare Manlises
IoT Levels
TOPIC OBJECTIVES:
1.
To be able to understand IoT system components.
2.
To be able to explore IoT levels.
IoT Levels
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT System
An IoT system comprises the following components: Device, Resource, Controller Service, 
Database, and Web service, Analysis, Component and Application. 
•
Device: An IoT device allows identification, remote sensing, and remote monitoring capabilities. 
•
Resource: 
 
Software components on the IoT device for:
•
accessing, processing and storing sensor information,
•
Controlling actuators connected to the device.
•
Enabling network access for the device.
•
Controller Service: Controller service is a native service that runs on the device and interacts with the 
web services. It sends data from the device to the web service and receives commands from the 
application (via web services) for controlling the device.
•
Web Service: Web services serve as a link between the IoT device, application, and database and 
analysis components. It can be implemented using HTTP and REST principles (REST service) or using the 
Web Socket protocol (Web Socket service).
•
Analysis Component: Analysis Component is responsible for analyzing the IoT data and generating 
results in a form that is easy for the user to understand.
•
Application: IoT applications provide an interface that the users can use to control and monitor various 
aspects of the IoT system. Applications also allow users to view the system status and the processed 
data.
IoT Levels
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Level-1
•
A level-1 IoT system has a single node/device that performs 
sensing and/or actuation, stores data, performs analysis and 
hosts the application.
•
Level-1 IoT systems are suitable for modeling low- cost and 
low-complexity solutions where the data involved is not big 
and the analysis requirements are not computationally 
intensive.
IoT Levels
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Level-1
IoT – Level 1 Example : Home Automation System 
IoT Levels
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Level-2
•
A level-2 IoT system has a single node that performs sensing 
and/or actuation and local analysis. Data is stored in the 
cloud and the application is usually cloud-based.
•
Level-2 IoT systems are suitable for solutions where the data 
involved is big; however, the primary analysis requirement is 
not computationally intensive and can be done locally.
IoT Levels
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Level-2
IoT – Level 2 Example: Smart Irrigation
IoT Levels
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Level-3
•
A level-3 IoT system has a single node. Data is stored and 
analyzed in the cloud and the application is cloud based.
•
Level-3 IoT systems are suitable for solutions where the data 
involved is big and the analysis requirements are 
computationally intensive.
IoT Levels
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Level-3
IoT – Level 3 Example: Tracking Package Handling
•
Web socket service is used because sensor data can be sent in real time. 
Sensors used:
Accelerometer sense movement or vibrations
Gyroscope:
Gives orientation info
IoT Levels
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Level-4
•
A level-4 IoT system has multiple nodes that 
perform local analysis. Data is stored in the 
cloud and the application is cloud-based.
•
Level-4 contains local and cloud-based 
observer nodes which can subscribe and 
receive information collected in the cloud 
from IoT devices.
•
Level-4 IoT systems are suitable for 
solutions 
where 
multiple 
nodes 
are 
required, the data involved is big and the 
analysis requirements are computationally 
intensive.
IoT Levels
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Level-4
IoT – Level 4 Example: Noise Monitoring
Sound Sensors used:
IoT Levels
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Level-5
•
A level-5 IoT system has multiple end nodes 
and one coordinator node.
•
The end nodes perform sensing and/or 
actuation.
•
The coordinator node collects data from the 
end nodes and sends it to the cloud.
•
Data is stored and analyzed in the cloud and 
the application is cloud- based.
•
Level-5 IoT systems are suitable for 
solutions 
based 
on 
wireless 
sensor 
networks, in which the data involved is 
brigand the analysis requirements are 
computationally intensive.
IoT Levels
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Level-5
IoT – Level 5 Example: Forest Fire Detection
•
Detect forest fire in early stages to take action while the fire is still controllable. Sensors 
measure the temperature, smoke, weather, slope of the earth, wind speed, speed of fire 
spread, flame length. 
IoT Levels
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Level-6
•
A 
level-6 
IoT 
system 
has 
multiple 
independent end nodes that perform 
sensing and/or actuation and send data to 
the cloud.
•
Data is stored in the cloud and the 
application is cloud-based.
•
The analytics component analyzes the data 
and stores the results in the cloud database.
•
The results are visualized with the cloud-
based application.
•
The centralized controller is aware of the 
status of all the end nodes and sends 
control commands to the nodes.
IoT Levels
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Level-6
IoT – Level 6 Example: Weather Monitoring System
•
Sensors used: Wind speed and direction, Solar radiation, Temperature (air, water, soil), 
Relative humidity, Precipitation, Snow depth, Barometric pressure, Soil moisture. 
Domain Specific 
IoTs
Cyrel Ontimare Manlises
Domain Specific IoTs
TOPIC OBJECTIVES:
1.
To be able to explore various IoT applications.
Domain Specific IoTs
IoT Applications for: 
1. Home
2. Cities
3. Environment
4. Energy Systems
5. Retail
6. Logistics
7. Industry
8. Agriculture
9. Health and Lifestyle.
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Domain Specific IoTs
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Applications
1. Home Automation
IoT applications for smart homes:
a) Smart Lighting 
b) Smart Appliances
c) Intrusion Detection
d) Smoke/Gas Detectors
Domain Specific IoTs
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Applications
1. Home Automation
a) Smart Lighting
•
Smart lighting achieves energy savings by sensing the human movements and 
their environments and controlling the lights accordingly.
•
Key enabling technologies for smart lighting include:
•
Solid state lighting (such as LED lights)
•
IP-enabled lights
•
Wireless-enabled and Internet connected lights can be controlled remotely 
from IoT applications such as a mobile or web application.
•
Paper: Energy-aware wireless sensor network with ambient intelligence for 
smart LED lighting system control [IECON, 2011] presented controllable LED 
lighting system that is embedded with ambient intelligence gathered from a 
distributed smart WSN to optimize and control the lighting system to be more 
efficient and user-oriented.
Domain Specific IoTs
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Applications
1. Home Automation
b) Smart Appliances
•
Smart appliances make the management easier and provide status information of 
appliances to the users remotely. E.g.: smart washer/dryer that can be controlled remotely 
and notify when the washing/drying cycle is complete.
•
Open Remote is an open-source automation platform for smart home and building that 
can control various appliances using mobile and web applications.
•
It comprises of three components:
•
A Controller: manages scheduling and runtime integration between devices
•
A Designer: allows creating both configurations for the controller and user 
interface designs.
•
Control Panel: allows interacting with devices and controlling them.
•
Paper: An IoT-based Appliance Control System for Smart Home [ICICIP, 2013] 
implemented an IoT based appliance control system for smart homes that uses a smart- 
central controller to set up a wireless sensor and actuator network and control modules 
for appliances.
Domain Specific IoTs
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Applications
1. Home Automation
c) Intrusion Detection
•
Home intrusion detection systems use security cameras and sensors to detect intrusions 
and raise alerts.
•
The form of the alerts can be in form:
•
SMS
•
Email
•
Image grab or a short video clip as an email attachment.
•
Paper: Could controlled intrusion detection and burglary prevention stratagems in home 
automation systems [BCFIC, 2012] present a controlled intrusion detection system that 
uses location-aware services, where the geo-location of each node of a home automation 
system is independently detected and stored in the cloud?. An Intelligent Intrusion 
Detection System Based on UPnP Technology for Smart Living [ISDA, 2008] implement an 
intrusion detection system that uses image processing to recognize the intrusion and 
extract the intrusion subject and generate Universal-Plug-and-Play (UPnP-based) instant 
messaging for alerts.
Domain Specific IoTs
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Applications
1. Home Automation
d) Smoke/Gas Detectors
•
Smoke detectors are installed in homes and buildings to detect smoke that is 
typically an early sign of fire.
•
It uses optical detection, ionization or air sampling techniques to detect smoke.
•
The form of the alert can be in form:
•
Signals that send to a fire alarm system
•
Gas detector can detect the presence of harmful gases such as carbon 
monoxide (CO), liquid petroleum gas (LPG), etc.
•
Paper: Development of Multipurpose Gas Leakage and Fire Detector with 
Alarm System [TIIEC, 2013] designed a system that can detect gas leakage and 
smoke and gives visual level indication.
Domain Specific IoTs
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Applications
2. Cities
IoT applications for smart cities:
a) Smart Parking
b) Smart Lighting for Road
c) Smart Road
d) Structural health Monitoring
e) Surveillance
f)
Emergency Response
Domain Specific IoTs
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Applications
2. Cities
a) Smart Parking
•
Finding the parking space in the crowded city can be time consuming and frustrating.
•
Smart parking makes the search for parking space easier and convenient for driver.
•
It can detect the number of empty parking slots and send the information over the 
Internet to the smart parking applications which can be accessed by the drivers using their 
smart phones, tablets, and in car navigation systems.
•
Sensors are used for each parking slot to detect whether the slot is empty or not, and this 
information is aggregated by local controller and then sent over the Internet to database.
•
Paper :Design and implementation of a prototype Smart Parking (SPARK) system using 
WSN [International Conference on Advanced Information Networking and Applications 
Workshop, 2009] designed and implemented a prototype smart parking system based on 
wireless sensor network technology with features like remote parking monitoring, 
automate guidance, and parking reservation mechanism.
Domain Specific IoTs
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Applications
2. Cities
b) Smart Lighting for Roads
•
It can help in saving energy.
•
Smart lighting for roads allows lighting to be dynamically controlled and also 
adaptive to ambient conditions.
•
Smart light connected to the Internet can be controlled remotely to configure 
lighting schedules and lighting intensity.
•
Custom lighting configurations can be set for different situations such as a 
foggy day, a festival, etc.
•
Paper : Smart Lighting solutions for Smart Cities [International Conference on 
Advance Information Networking and Applications Workshop, 2013] 
described the need for smart lighting system in smart cities, smart lighting 
features and how to develop interoperable smart lighting solutions.
Domain Specific IoTs
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Applications
2. Cities
c) Smart Roads
•
Smart Roads provides information on driving conditions, travel time estimates 
and alerts in case of poor driving conditions, traffic congestions and accidents.
•
Such information can help in making the roads safer and help in reducing traffic 
jams.
•
Information sensed from the roads can be communicated via internet to cloud-
based applications and social media and disseminated to the drivers who 
subscribe to such applications.
•
Paper : Sensor networks for smart roads [PerCom Workshop, 2006] proposed 
a distributed and autonomous system of sensor network nodes for improving 
driving safety on public roads, the system can provide the driver and 
passengers with a consistent view of the road situation a few hundred meters 
ahead of them or a few dozen miles away, so that they can react to potential 
dangers early enough.
Domain Specific IoTs
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Applications
2. Cities
d) Structural Health Monitoring
•
It uses a network of sensors to monitor the vibration levels in the structures such as 
bridges and buildings.
•
The data collected from these sensors is analyzed to assess the health of the structures.
•
By analyzing the data it is possible to detect cracks and mechanical breakdowns, locate the 
damages to a structure and also calculate the remaining life of the structure.
•
Using such systems, advance warnings can be given in the case of imminent failure of the 
structure.
•
Paper : Environmental Effect Removal Based Structural Health Monitoring in the Internet 
of Things [International Conference on Innovative Mobile and Internet Services in 
Ubiquitous Computing, 2013] proposed an environmental effect removal based structural 
health monitoring scheme in an IoT environment. Energy harvesting technologies for 
structural health monitoring applications [IEEE Conference on Technologies for 
Sustainability, 2013] Explored energy harvesting technologies of harvesting ambient 
energy, such as mechanical vibrations, sunlight, and wind.
Domain Specific IoTs
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Applications
2. Cities
e) Surveillance
•
Surveillance of infrastructure, public transport and events in cities is required 
to ensure safety and security.
•
City wide surveillance infrastructure comprising of large number of distributed 
and Internet connected video surveillance cameras can be created.
•
The video feeds from surveillance cameras can be aggregated in cloud-based 
scalable storage solutions.
•
Cloud-based video analytics applications can be developed to search for 
patterns of specific events from the video feeds.
Domain Specific IoTs
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Applications
2. Cities
f)
Emergency Rescue
•
IoT systems can be used for monitoring the critical infrastructure cities such as 
buildings, gas, and water pipelines, public transport and power substations.
•
IoT systems for critical infrastructure monitoring enable aggregation and 
sharing of information collected from lager number of sensors.
•
Using cloud-based architectures, multi-modal information such as sensor data, 
audio, video feeds can be analyzed I near real-time to detect adverse events.
•
The alert can be in the form :
•
Alerts sent to the public
•
Re-rerouting of traffic
•
Evacuations of the affected areas
Domain Specific IoTs
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Applications
3. Environment
IoT applications for smart environments:
a) Weather Monitoring
b) Air Pollution Monitoring
c) Noise Pollution Monitoring
d) Forest Fire Detection
e) River Flood Detection
Domain Specific IoTs
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Applications
3. Environment
a) Weather Monitoring
•
It collects data from a number of sensors attached such as temperature, 
humidity, pressure, etc and sends the data to cloud-based applications and 
store back-ends.
•
The data collected in the cloud can then be analyzed and visualized by cloud-
based applications.
•
Weather alert can be sent to the subscribed users from such applications.
•
AirPi is a weather and air quality monitoring kit capable of recording and 
uploading information about temperature, humidity, air pressure, light levels, 
UV levels, carbon monoxide, nitrogen dioxide and smoke level to the Internet.
•
Paper: PeWeMoS – Pervasive Weather Monitoring System [ICPCA, 2008] 
Presented a pervasive weather monitoring system that is integrated with buses 
to measure weather variables like humidity, temperature, and air quality during 
the bus path.
Domain Specific IoTs
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Applications
3. Environment
b) Air Pollution Monitoring
•
IoT based air pollution monitoring system can monitor emission of harmful 
gases by factories and automobiles using gaseous and meteorological sensors.
•
The collected data can be analyzed to make informed decisions on pollutions 
control approaches.
•
Paper: Wireless sensor network for real-time air pollution monitoring 
[ICCSPA, 2013] Presented a real time air quality monitoring system that 
comprises of several distributed monitoring stations that communicate via 
wireless with a backend server using machine-to machine communication.
Domain Specific IoTs
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Applications
3. Environment
c) Noise Pollution Monitoring
•
Noise pollution monitoring can help in generating noise maps for cities.
•
It can help the policy maker in making policies to control noise levels near residential 
areas, school and parks.
•
It uses a number of noise monitoring stations that are deployed at different places in a 
city.
•
The data on noise levels from the stations is collected on servers or in the cloud and then 
the collected data is aggregate to generate noise maps.
•
Papers: Noise mapping in urban environments: Applications at Suez city center [ICCIE, 
2009] presented a noise mapping study for a city which revealed that the city suffered 
from serious noise pollution. Sound Of City – Continuous noise monitoring for a health 
city [PerComW,2013] Designed a Smartphone application that allows the users to 
continuously measure noise levels and send to a central server here all generated 
information is aggregated and mapped to a meaningful noise visualization map.
Domain Specific IoTs
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Applications
3. Environment
d) Forest Fire Detection
•
IoT based forest fire detection system use a number of monitoring nodes 
deployed at different location in a forest.
•
Each monitoring node collects measurements on ambient condition including 
temperature, humidity, light levels, etc.
•
Early detection of forest fires can help in minimizing the damage.
•
Papers: A novel accurate forest fire detection system using wireless sensor 
networks [International Conference on Mobile Adhoc and Sensor Networks, 
2011] Presented a forest fire detection system based on wireless sensor 
network. The system uses multi-criteria detection which is implemented by the 
artificial neural network. The ANN fuses sensing data corresponding to, 
multiple attributes of a forest fire such as temperature, humidity, infrared and 
visible light to detect forest fires.
Domain Specific IoTs
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Applications
3. Environment
e) River Flood Detection
•
IoT based river flood monitoring system uses a number of sensor nodes that monitor the 
water level using ultrasonic sensors and flow rate using velocity sensors.
•
Data from these sensors is aggregated in a server or in the cloud, monitoring applications 
raise alerts when rapid increase in water level and flow rate is detected.
•
Papers: RFMS : Real time flood monitoring system with wireless sensor networks [MASS, 
2008] Described a river flood monitoring system that measures river and weather 
conditions through wireless sensor nodes equipped with different sensors. Urban Flash 
Flood Monitoring, Mapping and Forecasting via a Tailored Sensor Network System 
[ICNSC, 2006] Described a motes-based sensor network for river flood monitoring that 
includes a water level monitoring module, network video recorder module, and data 
processing module that provides floods information n the form of raw data, predict data, 
and video feed.
Domain Specific IoTs
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Applications
4. Energy
IoT applications for energy systems:
a) Smart Grid
b) Renewable Energy Systems
c) Prognostics
Domain Specific IoTs
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Applications
4. Energy
a) Smart Grids
•
Smart grid technology provides predictive information and recommendation s to utilize, 
their suppliers, and their customers on how best to manage power.
•
Smart grid collect the data regarding :
•
Electricity generation
•
Electricity consumption
•
Storage
•
Distribution and equipment health data
•
By analyzing the data on power generation, transmission and consumption of smart grids 
can improve efficiency throughout the electric system. Storage collection and analysis of 
smarts grids data in the cloud can help in dynamic optimization of system operations, 
maintenance, and planning.
•
Cloud-based monitoring of smart grids data can improve energy usage levels via energy 
feedback to users coupled with real-time pricing information.
•
Condition monitoring data collected from power generation and transmission systems can 
help in detecting faults and predicting outages.
Domain Specific IoTs
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Applications
4. Energy
b) Renewable Energy Systems
•
Due to the variability in the output from renewable energy sources (such as 
solar and wind), integrating them into the grid can cause grid stability and 
reliability problems.
•
IoT based systems integrated with the transformer at the point of 
interconnection measure the electrical variables and how much power is fed 
into the grid.
•
To ensure the grid stability, one solution is to simply cut off the 
overproductions.
•
Paper: Communication systems for grid integration of renewable energy 
resources [IEEE Network, 2011] -provided the closed-loop controls for wind 
energy system that can be used to regulate the voltage at point of 
interconnection which coordinate wind turbine outputs and provides reactive 
power support.
Domain Specific IoTs
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Applications
4. Energy
c) Prognostics
•
IoT based prognostic real-time health management systems can predict 
performance of machines of energy systems by analyzing the extent of 
deviation of a system from its normal operating profiles.
•
In the system such as power grids, real time information is collected using 
specialized electrical sensors called Phasor Measurement Units (PMU).
•
Analyzing massive amounts of maintenance data collected from sensors in 
energy systems and equipment can provide predictions for impending failures.
•
OpenPDC is a set of applications for processing of streaming time-series data 
collected from Phasor Measurements Units (PMUs) in real-time.
Domain Specific IoTs
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Applications
5. Retail
IoT applications for smart retail systems:
a) Inventory Management
b) Smart Payments
c) Smart Vending Machines
Domain Specific IoTs
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Applications
5. Retail
a) Inventory Management
•
IoT system using Radio Frequency Identification (RFID) tags can help inventory 
management and maintaining the right inventory levels.
•
RFID tags attached to the products allow them to be tracked in the real-time so 
that the inventory levels can be determined accurately and products which are 
low on stock can be replenished.
•
Tracking can be done using RFID readers attached to the retail store shelves or 
in the warehouse.
•
Paper: RFID data-based inventory management of time-sensitive materials 
[IECON, 2005] described an RFID data-based inventory management system for 
time-sensitive materials.
Domain Specific IoTs
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Applications
5. Retail
b) Smart Payments
•
Smart payments solutions such as contact-less payments powered technologies 
such as near field communication (NFC) and Bluetooth.
•
NFC is a set of standards for smart-phones and other devices to communicate 
with each other by bringing them into proximity or by touching them.
•
Customer can store the credit card information in their NFC-enabled smart-
phones and make payments by bringing the smart-phone near the point-of-sale 
terminals.
•
NFC maybe used in combination with Bluetooth, where NFC initiates initial 
pairing of devices to establish a Bluetooth connection while the actual data 
transfer takes place over Bluetooth.
Domain Specific IoTs
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Applications
5. Retail
c) Smart Vending Machines
•
Smart vending machines connected to the Internet allow remote monitoring of 
inventory levels, elastic pricing of products, promotions, and contact-less 
payments using NFC.
•
Smart-phone applications that communicate with smart vending machines 
allow user preferences to be remembered and learned with time. E.g.: when a 
user moves from one vending machine to the other and pair the smart-phone, 
the user preference and favorite product will be saved and then that data is 
used for predictive maintenance.
•
Smart vending machines can communicated each others, so if a product out of 
stock in a machine, the user can be routed to nearest machine.
•
For perishable items, the smart vending machines can reduce the price as the 
expiry date nears.
Domain Specific IoTs
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Applications
6. Logistic
IoT applications for smart logistic systems:
a) Fleet Tracking
b) Shipment Monitoring
c) Remote Vehicle Diagnostics
Domain Specific IoTs
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Applications
6. Logistic
a) Fleet Tracking
•
Vehicle fleet tracking systems use GPS technology to track the locations of the vehicles in 
the real-time.
•
Cloud-based fleet tracking systems can be scaled up on demand to handle large number of 
vehicles,
•
The vehicle locations and routers data can be aggregated and analyzed for detecting 
bottlenecks the supply chain such as traffic congestions on routes, assignments and 
generation of alternative routes, and supply chain optimization
•
Paper: A Fleet Monitoring System for Advanced Tracking of commercial Vehicles [IEEE 
International Conference in Systems, Man and Cybernetics, 2006] provided a system that 
can analyze messages sent from the vehicles to identify unexpected incidents and 
discrepancies between actual and planned data, so that remedial actions can be taken.
Domain Specific IoTs
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Applications
6. Logistic
b) Shipment Monitoring
•
Shipment monitoring solutions for transportation systems allow monitoring the conditions 
inside containers.
•
E.g.: Containers carrying fresh food produce can be monitored to prevent spoilage of food. 
IoT based shipment monitoring systems use sensors such as temperature, pressure, 
humidity, for instance, to monitor the conditions inside the containers and send the data 
to the cloud, where it can be analyzed to detect food spoilage.
•
Paper: On a Cloud-Based Information Technology Framework for Data Driven Intelligent 
Transportation System [Journal of Transportation Technologies, 2013] -proposed a cloud 
based framework for real time fresh food supply tracking and monitoring. Container 
Integrity and Condition Monitoring using RF Vibration Sensor Tags [IEEE International 
Conference on Automation Science and Engineering, 2007]- proposed a system that can 
monitor the vibrations patterns of a container and its contents to reveal information 
related to its operating environment and integrity during transport, handling, and storage.
Domain Specific IoTs
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Applications
6. Logistic
c) Remote Vehicle Diagnostics
•
It can detect faults in the vehicles or warn of impending faults.
•
These diagnostic systems use on-board IoT devices for collecting data on 
vehicle operation such as speed, engine RPM, coolest temperature, fault code 
number and status of various vehicle subsystem.
•
Modern commercial vehicles support on-board diagnostic (OBD) standard such 
as OBD- II.
•
OBD systems provide real-time data on the status of vehicle sub-systems and 
diagnostic trouble codes which allow rapidly identifying the faults in the 
vehicle.
•
IoT based vehicle diagnostic systems can send the vehicle data to centralize 
servers or the cloud where it can be analyzed to generate alerts and suggest 
remedial actions.
Domain Specific IoTs
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Applications
7. Agriculture
IoT applications for smart agriculture:
a) Smart Irrigation
b) Green House Control
Domain Specific IoTs
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Applications
7. Agriculture
a) Smart Irrigation
•
Smart irrigation system can improve crop yields while saving water.
•
Smart irrigation systems use IoT devices with soil moisture sensors to 
determine the amount of moisture on the soil and release the flow of the 
water through the irrigation pipes only when the moisture levels go below a 
predefined threshold.
•
It also collects moisture level measurements on the server on in the cloud 
where the collected data can be analyzed to plan watering schedules.
•
Cultivar’s Rain Could is a device for smart irrigation that uses water valves, soil 
sensors, 
and 
a 
Wi-Fi 
enabled 
programmable 
computer. 
[http://ecultivar.com/rain-cloud-product- project/].
Domain Specific IoTs
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Applications
7. Agriculture
b) Green House Control
•
It controls temperature, humidity, soil, moisture, light, and carbon dioxide level 
that are monitored by sensors and climatologically conditions that are 
controlled automatically using actuation devices.
•
IoT systems play an importance role in green house control and help in 
improving productivity.
•
The data collected from various sensors is stored on centralized servers or in 
the cloud where analysis is performed to optimize the control strategies and 
also correlate the productivity with different control strategies.
•
Paper: Wireless sensing and control for precision Green house management 
[ICST, 2012] provided a system that uses wireless sensor network to monitor 
and control the agricultural parameters like temperature and humidity in the 
real time for better management and maintenance of agricultural production.
Domain Specific IoTs
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Applications
8. Industry
IoT applications for smart industry:
a) Machine Diagnosis and Prognosis
b) Indoor Air Quality Monitoring
Domain Specific IoTs
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Applications
8. Industry
a) Machine Diagnosis and Prognosis
•
Machine prognosis refers to predicting the performance of machine by 
analyzing the data on the current operating conditions and how much 
deviations exist from the normal operating condition.
•
Machine diagnosis refers to determining the cause of a machine fault.
•
Sensors in machine can monitor the operating conditions such as temperature 
and vibration levels, sensor data measurements are done on timescales of few 
milliseconds to few seconds which leads to generation of massive amount of 
data.
•
Case-based reasoning (CBR) is a commonly used method that finds solutions to 
new problems based on past experience.
•
CBR is an effective technique for problem solving in the fields in which it is hard 
to establish a quantitative mathematical model, such as machine diagnosis and 
prognosis.
Domain Specific IoTs
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Applications
8. Industry
b) Indoor Air Quality Monitoring
•
Harmful and toxic gases such as carbon monoxide (CO), nitrogen monoxide (NO), Nitrogen 
Dioxide, etc. can cause serious health problem of the workers.
•
IoT based gas monitoring systems can help in monitoring the indoor air quality using 
various gas sensors.
•
The indoor air quality can be placed for different locations.
•
Wireless sensor networks based IoT devices can identify the hazardous zones, so that 
corrective measures can be taken to ensure proper ventilation.
•
Papers: A hybrid sensor system for indoor air quality monitoring [IEEE International 
Conference on Distributed Computing in Sensor System, 2013] presented a hybrid sensor 
system for indoor air quality monitoring which contains both stationary sensor and mobile 
sensors. Indoor air quality monitoring using wireless sensor network [International 
Conference on Sensing Technology, 2012] provided a wireless solution for indoor air 
quality monitoring that measures the environmental parameters like temperature, 
humidity, gaseous pollutants, aerosol and particulate matter to determine the indoor air 
quality.
Domain Specific IoTs
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Applications
9. Health and Fitness Monitoring
IoT applications for smart health and lifestyle:
a) Health and Fitness Monitoring
b) Wearable Electronics
Domain Specific IoTs
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Applications
9. Health and Lifestyle
a) Health and Fitness Monitoring
•
Wearable IoT devices allow to continuous monitoring of physiological parameters such as 
blood pressure, heart rate, body temperature, etc than can help in continuous health and 
fitness monitoring.
•
It can analyze the collected health-care data to determine any health conditions or 
anomalies.
•
The wearable devices may can be in various form such as:
•
Belts
•
Wrist-bands
•
Papers: Toward ubiquitous mobility solutions for body sensor network health care [IEEE 
Communications Magazine, 2012] - Proposed an ubiquitous mobility approach for body 
sensor network in health-care. A wireless sensor network compatible wearable u-
healthcare monitoring system using integrated ECG, accelerometer and SpO2 
[International Conference of the IEEE Engineering in Medicine and Biology Society, 
2008]- Designed a wearable ubiquitous health-care monitoring system that uses 
integrated electrocardiogram (ECG), accelerometer and oxygen saturation (SpO2) sensors.
Domain Specific IoTs
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Applications
9. Health and Lifestyle
b) Wearable Electronics
•
Wearable electronics such as wearable gadgets (smart watch, smart glasses, 
wristbands, etc.) provide various functions and features to assist us in our daily 
activities and making us lead healthy lifestyles.
•
Using the smart watch, the users can search the internet, play audio/video 
files, make calls, play games, etc.
•
Smart glasses allows users to take photos and record videos, get map 
directions, check flight status or search internet using voice commands.
•
Smart shoes can monitor the walking or running speeds and jumps with the 
help of embedded sensors and be paired with smart-phone to visualize the 
data.
•
Smart wristbands can tract the daily exercise and calories burnt.
IOT VS M2M
Cyrel Ontimare Manlises
IOT VS M2M
TOPIC OBJECTIVES:
1.
To be able to differentiate between IoT and M2M.
2.
To be able to understand the basic principles of IoT and M2M.
IOT VS M2M
The Internet of Things (IoT)
• The Internet of Things (IoT) is the network of physical devices 
embedded with sensors, software and electronics, enabling 
these devices to communicate with each other and exchange 
data over a computer network. The things in the IoT refer to 
hardware devices uniquely identifiable through a network 
platform within the Internet infrastructure. 
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IOT VS M2M
Machine-To-Machine (M2M)
•
M2M, or machine-to-machine, is a direct communication between devices using wired or 
wireless communication channels. M2M refers to the interaction of two or more 
devices/machines that are connected to each other. These devices capture data and share 
with other connected devices, creating an intelligent network of things or systems. Devices 
could be sensors, actuators, embedded systems or other connected elements. 
•
M2M technology could be present in our homes, offices, shopping malls and other places. 
Controlling electrical appliances like bulbs and fans using RF or Bluetooth from your 
Smartphone is a simple example of M2M applications at home. Here, the electrical appliance 
and your Smartphone are the two machines interacting with each other.
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IOT VS M2M
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
M2M versus the IoT
M2M
IoT
M2M is about direct communication 
between machines.
The IoT is about sensors automation and 
Internet platform.
It supports point-to-point communication.
It supports cloud communication.
Devices do not necessarily rely on an 
internet connection.
Devices rely on an Internet connection.
M2M is mostly hardware-based technology.
The IoT is both hardware and software-
based technology
Machines normally communicate with a 
single machine at a time.
Many users can access at one time over the 
internet.
A device can be connected through mobile 
or other network.
Data delivery depends on the Internet 
protocol (IP) network.
IOT VS M2M
• However, there is a lot of confusion between the IoT and 
M2M, as both refer to communicating and sharing data. M2M 
is about machines, smart phones and appliances, whereas the 
IoT is about sensors, cyber-based physical systems, Internet 
and so on. Some of the differences between M2M and the IoT 
are listed in the table. 
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Application 
Development
Cyrel Ontimare Manlises
Application Development
TOPIC OBJECTIVES:
1.
To be able to  understand the Application Development
2.
To be able to understand the processes involve in Application Development
3.
To be able to understand the significance of each concept surrounding Application Development
Application Development
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
APPLICATION DEVELOPMENT 
• We develop IoT applications for software product companies 
including those engaged with the development of SaaS 
applications and smart products, as well as design, develop 
and implement IoT-capable enterprise applications. 
Application Development
Needs analysis and requirements gathering
• If you have detailed requirements to an IoT application’s 
functionality, we will closely analyze the requirements 
specification, define the project scope and complexity, and 
provide a delivery schedule. 
• In case you have a vision of an IoT application and want to 
turn your idea into a ready- to-use IoT solution, we carry out 
a feasibility study and analyze legal, regulatory and other 
requirements to create a well-defined IoT application 
specification. 
 
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Application Development
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT application development
• We can implement an IoT application at once according to a 
Waterfall methodology. Alternatively, we can turn to Agile 
launching a minimum viable product or a first application 
version with a lean set of high-priority features within 3-6 
months and releasing new features every 2-4 weeks. 
UI design for web and mobile apps 
• Our UI/UX designers wrap robust application functionality 
into a user-friendly and appealing interface to provide IoT 
application users with a convenient way to access IoT 
insights. 
Application Development
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Integration
• For software product companies, we design, model, and 
implement APIs to allow you reliably integrate IoT 
functionality into your software product. 
• For enterprises, our engineering team makes sure that the 
developed IoT application seamlessly integrates with 
relevant external systems, such as ERP, MES, OMS, and 
others 
 
Application Development
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Quality assurance 
• We place a premium on applications’ quality from the very 
start of the project and focus on prevention and early 
detection of defects. 
• At the application design stage, we conduct comprehensive 
verification of requirements and application architecture. 
Application Development
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Quality assurance
• At the development stage, we ensure quality with a well-
structured and well- documented code, and perform regular 
code reviews and unit testing. 
• At the testing stage, we resort to risk-based testing and pay 
special attention to critical application functionality, perform 
exploratory testing to detect non-obvious application 
defects, as well as employ a relevant degree of automation 
to increase test coverage and eliminate regression errors. 
 
Application Development
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Security testing 
• With 15 years in cyber security, we incorporate security as 
early as at the application design phase and conduct 
vulnerability assessment and penetration testing for all major 
releases. 
User training 
• For enterprise clients, we provide comprehensive training 
including step-by-step guides, onsite training, and workshops 
before an application or an application build goes live in an 
enterprise to help your employees get used to the new 
processes and ensure high user adoption. 
Application Development
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT application launch 
• For enterprises, we release an IoT application or its version 
into the existing enterprise IT environment. 
After-launch support and application evolution 
• We will carry out IoT application monitoring and 
performance management, proactively diagnose and fix 
application defects, and perform daily administration tasks 
including security updates, user and access management to 
make sure your IoT-capable product or enterprise IoT 
application runs without a hitch and stays up-to-date with 
your business needs. 
Application Development
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Knowledge transfer
• We are ready to deliver a comprehensive knowledge transfer 
plan and share our expertise with your IT team to enable you 
manage and further develop an IoT application with in-house 
resources.
 
Specifications 
Integration and 
Application 
Development
Cyrel Ontimare Manlises
Specifications Integration and 
Application Development
TOPIC OBJECTIVES:
1.
To be able to  understand the importance of requirements for Application Development
2.
To be able to understand how requirements and specifications are manage.
Specifications Integration and 
Application Development
Requirements and Specifications
• Smart IoT services demand careful requirements capturing 
and specification development 
• A comprehensive description of an IoT service and/or its 
elements is needed to support the development and 
verification process. 7layers supports these processes with 
formal description techniques. 
 
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Specifications Integration and 
Application Development
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Requirements capturing and requirements specification 
•
Requirements capturing is the first step in a requirements engineering process. The 
description of a capability or characteristic that provides value to a user or other stakeholder 
in an IoT Services process has been defined as a “requirement”, whereas a set of specific 
requirements is called a “requirements specification”. Requirements specifications are used 
as input into the design stage of an IoT process. Goal is to achieve a complete, valid and 
processable description of an IoT Service and/or its elements. To establish a complete 
requirements specification, 7layers performs the following activities: 
Specifications Integration and 
Application Development
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Requirements capturing and requirements specification 
Initial requirements capturing and elicitation
• For this purpose we interview IoT Services stakeholders and 
potential users about their demands, business cases, user 
stories etc. We also analyze conceptual papers, feasibility 
studies, already existing product or services descriptions from 
various sources. 
Specifications Integration and 
Application Development
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Requirements capturing and requirements specification 
Requirements classification 
• Once the requirements have been captured, they are 
classified according to architectural / design requirements, 
functional and non-functional requirements. 
Specifications Integration and 
Application Development
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Requirements capturing and requirements specification 
Structuring of requirements 
• Requirements are structured according to characteristics 
such as hardware, software, communications, interfaces, 
security, electrical mechanical etc. 
Specifications Integration and 
Application Development
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Requirements capturing and requirements specification
Description and documentation of IoT process requirements 
• After classification and structuring, the requirements are 
described using formal description techniques. Especially for 
processes as complex as IoT Services set- ups, the 
requirements should be documented in a system that allows 
for continuous requirements management. 
 
Specifications Integration and 
Application Development
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Services specification 
• An appropriate subset of the established requirements will be 
used to define the basic IoT Service. In some cases additional 
aspects like environmental or legal requirements, or 
functional and design aspects may be included in the services 
specification. All specifications must be documented in a 
complete, consistent, correct, unambiguous and testable way. 
Specifications Integration and 
Application Development
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Requirements and specification management 
•
Naturally, the requirements and specifications of the many elements an IoT Service is made 
of will evolve during its lifecycle. Initially this is due to the verification processes during the 
development, implementation and release phases. Once released however, an IoT Service 
and its elements have to be monitored continuously and adapted to aspects such as market, 
regulatory, technical or business developments. For this purpose, the feedback from various 
IoT Services stakeholders has to be documented, analyzed, priorities and agreed upon. 
•
7layers support these processes by documenting and analyzing change requests, setting-up 
joint requirements development sessions, establishing a version management process for 
requirements and a release management process for requirements specifications. 
Specifications Integration and 
Application Development
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Requirements and specification management 
•
The more complex a product or service is, the more important it becomes to use proven 
software systems to support the lifecycle management processes of requirements and 
specifications management. Suitable systems are for example Interlab EVO, Rational DOORS, 
and HP Quality Center etc. At 7layers we take great care, that feedback arising from testing 
and verification processes can be traced back exactly to their respective requirements, thus 
easing the lifecycle management process considerably and helping improve the overall 
quality of service. 
IoT Systems 
Management
Cyrel Ontimare Manlises
IoT Systems Management
TOPIC OBJECTIVES:
1.
To be able to  understand the different IoT Systems Management
2.
To be able to understand the various concepts of IoT Systems Management
IoT Systems Management
IoT Systems Management
1. Need for IoT Systems Management
2. SNMP
3. Network Operator Requirements
4. NETCONF
5. YANG
6. IoT Systems Management with NETCONF-YANG
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Systems Management
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
1. Need for IoT Systems Management
•
Automating Configuration
•
Monitoring Operational & Statistical Data 
•
Improved Reliability
•
System Wide Configurations 
•
Multiple System Configurations 
•
Retrieving & Reusing Configurations 
IoT Systems Management
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
2. Simple Network Management Protocol (SNMP)
•
 SNMP is a well-known and widely used network 
management 
protocol 
that 
allows 
monitoring 
and 
configuring network devices such as routers, switches, 
servers, printers, etc. Monitoring Operational & Statistical 
Data 
•
SNMP component include:
❑Network Management Station (NMS)
❑Managed Device
❑Management Information Base (MIB)
❑SNMP Agent that runs on the device
IoT Systems Management
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
2. Simple Network Management Protocol (SNMP)
IoT Systems Management
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
2. Simple Network Management Protocol (SNMP)
Limitations of SNMP 
• Stateless in nature and each SNMP request contains all the 
information to process the request. The application needs to 
be intelligent to manage the device. 
• It is difficult to differentiate between configuration and state 
data in MIBs. 
• Retrieving the current configuration from a device can be 
difficult with SNMP 
• Earlier versions of SNMP did not have strong security 
features. 
IoT Systems Management
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
3. Network Operator Requirements 
• Ease of use
• Distinction between configuration and state data 
• Fetch configuration and state data separately 
• Configuration of the network as a whole 
• Dump and restore configurations 
•  Configuration validation 
• Configuration database schemas 
• Comparing configurations 
• Role-based access control 
• Consistency of access control lists: 
• Multiple configuration sets 
IoT Systems Management
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
4. Network Configuration Protocol (NETCONF)
• Network Configuration Protocol (NETCONF) is a session-based 
network management protocol. 
• NETCONF allows retrieving state or configuration data and 
manipulating configuration data on network devices. 
IoT Systems Management
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
4. Network Configuration Protocol (NETCONF)
• Transport layer provides end-to-end connectivity and ensure 
reliable delivery of messages. 
• The Content Layer consists of configuration and state data 
which is XML-encoded. 
• The schema of the configuration and state data is defined in 
a data modeling language called YANG. 
• NETCONF provides a clear separation of the configuration 
and state data. 
• The 
configuration 
data 
resides 
within 
a 
NETCONF 
configuration data store on the server 
IoT Systems Management
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
5. YANG
• YANG is a data modeling language used to model 
configuration and state data manipulated by the NETCONF 
protocol 
•  YANG modules contain the definitions of the configuration 
data, state data, RPC calls that can be issued and the format 
of the notifications. 
• A YANG module can import definitions from other modules. 
• Constraints can be defined on the data nodes, e.g. allowed 
values. 
• YANG can model both configuration data and state data using 
the 'config' statement. 
IoT Systems Management
5. YANG
YANG Module Example 
• This YANG module is a YANG version of the toaster MIB 
• The toaster YANG module begins with the header 
information followed by identity declarations which define 
various bread types. 
• The leaf nodes (‘toaster Manufacturer’, ‘toaster Model 
Number’ and Toaster Status’) are defined in the ‘toaster’ 
container. 
• Each leaf node definition has a type and optionally a 
description and default value. 
• The module has two RPC definitions (‘make-toast’ and 
‘cancel-toast’). 
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Systems Management
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
6. IoT Systems Management with NETCONF-YANG
•  Management System 
•  Management API 
• Transaction Manager 
• Rollback Manager 
• Data Model Manager 
• Configuration Validator 
• Configuration Database 
• Configuration API 
• Data Provider API 
IoT Systems Management
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
6. IoT Systems Management with NETCONF-YANG
IoT Design 
Methodology
Cyrel Ontimare Manlises
IoT Design Methodology
TOPIC OBJECTIVES:
1.
To be able to  understand the step-by-step procedure of an IoT Design Methodology
2.
To be able to understand the definition of every step in the Methodology
IoT Design Methodology
IoT DESIGN METHODOLOGY 
1. Purpose & Requirements Specification
 
2. Process Specification 
3. Domain Model Specification
 
4. Information Model Specification 
5. Service Specifications 
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Design Methodology
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT DESIGN METHODOLOGY 
6. IoT Level Specification 
7. Functional View Specification
 
8. Operational View Specification
 
9. Device & Component Integration 
10. Application Development 
IoT Design Methodology
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT DESIGN METHODOLOGY 
IoT Design Methodology
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Step 1: Purpose & Requirements Specification
• The first step in IoT system design methodology is to define 
the purpose and requirements of the system. In this step, the 
system purpose, behavior and requirements (such as data 
collection requirements, data analysis requirements, system 
management requirements, data privacy and security 
requirements, user interface requirements,) are captured. 
 
IoT Design Methodology
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Step 2: Process Specification
• The second step in the IoT design methodology is to define 
the process specification. In this step, the use cases of the 
IoT system are formally described based on and derived from 
the purpose and requirement specifications. 
 
IoT Design Methodology
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Step 3: Domain Model Specification
• The third step in the IoT design methodology is to define the 
Domain Model. The domain model describes the main 
concepts, entities and objects in the domain of IoT system to 
be designed. Domain model defines the attributes of the 
objects and relationships between objects. Domain model 
provides an abstract representation of the concepts, objects 
and entities in the IoT domain, independent of any specific 
technology or platform. With the domain model, the IoT 
system designers can get an understanding of the IoT domain 
for which the system is to be designed. 
 
IoT Design Methodology
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Step 4: Information Model Specification
• The fourth step in the IoT design methodology is to define 
the Information Model. Information Model defines the 
structure of all the information in the IoT system, for 
example, attributes of Virtual Entities, relations, etc. 
Information model does not describe the specifics of how 
the information is represented or stored. To define the 
information model, we first list the Virtual Entities defined in 
the Domain Model. Information model adds more details to 
the Virtual Entities by defining their attributes and relations. 
IoT Design Methodology
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Step 5: Service Specifications 
• The fifth step in the IoT design methodology is to define the 
service specifications. Service specifications define the 
services in the IoT system, service types, service 
inputs/output, service endpoints, service schedules, service 
preconditions and service effects. 
IoT Design Methodology
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Step 6: IoT Level Specification 
• The sixth step in the IoT design methodology is to define the 
IoT level for the system. In Chapter-1, we defined five IoT 
deployment levels. 
IoT Design Methodology
Step 7: Functional View Specification
• The seventh step in the IoT design methodology is to define 
the Functional View. The Functional View (FV) defines the 
functions of the IoT systems grouped into various Functional 
Groups (FGs). Each Functional Group either provides 
functionalities for interacting with instances of concepts 
defined in the Domain Model or provides information related 
to these concepts. 
 
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Design Methodology
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Step 8: Operational View Specification
• The eighth step in the IoT design methodology is to define 
the Operational View Specifications. In this step, various 
options pertaining to the IoT system deployment and 
operation are defined, such as, service hosting options, 
storage options, device options, application hosting options, 
etc 
 
IoT Design Methodology
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Step 9: Device & Component Integration 
• The ninth step in the IoT design methodology is the 
integration of the devices and components. 
IoT Design Methodology
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Step 10: Application Development
• The final step in the IoT design methodology is to develop 
the IoT application 
 
IoT 
Physical Devices 
and Endpoints
Cyrel Ontimare Manlises
IoT Physical Devices and Endpoints
TOPIC OBJECTIVES:
1.
To be able to understand the basic building blocks of an IoT device.
IoT Physical Devices and Endpoints
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Device
A "Thing" in Internet of Things (IoT) can be any object that has a unique identifier and which 
can send/receive data (including user data) over a network (e.g., smart phone, Smart TV, 
computer, refrigerator, car, etc.).
•
IoT devices are connected to the Internet and send information about themselves or about 
their surroundings (e.g. information sensed by the connected sensors) over a network (to 
other devices or servers/storage) or allow actuation upon the physical entities/environment 
around them remotely.
IoT Physical Devices and Endpoints
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Device Examples
• A home automation device that allows remotely monitoring 
the status of appliances and controlling the appliances.
IoT Physical Devices and Endpoints
IoT Device Examples
• An industrial machine which sends information abouts its 
operation and health monitoring data to a server.
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Physical Devices and Endpoints
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Device Examples
• A car which sends information about its location to a cloud-
based service.
IoT Physical Devices and Endpoints
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Device Examples
• A 
wireless-enabled 
wearable 
device that measures data about 
a person such as the number of 
steps walked and sends the data 
to 
a 
cloud-based 
service.
IoT Physical Devices and Endpoints
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Basic Building Blocks of an IoT Device
1. Sensing: Sensors can be either on-board the IoT device or 
attached to the device.
2. Actuation: IoT devices can have various types of actuators 
attached that allow taking actions upon the physical entities 
in the vicinity of the device.
3. Communication: Communication modules are responsible 
for sending collected data to other devices or cloud-based 
servers/storage and receiving data from other devices and 
commands from remote applications.
4. Analysis & Processing: Analysis and processing modules are 
responsible for making sense of the collected data.
IoT Physical Devices and Endpoints
Block Diagram of an IoT Device
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Physical Devices and Endpoints
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Exemplary Device: Raspberry Pi
•
Raspberry Pi is a low-cost mini-computer with the physical size of a credit card. 
•
Raspberry Pi runs various flavors of Linux and can perform almost all tasks that a normal 
desktop computer can do. 
•
Raspberry Pi also allows interfacing sensors and actuators through the general purpose I/O 
pins. Since Raspberry Pi runs Linux operating system, it supports Python "out of the box".
•
Raspberry Pi is a low-cost mini-computer with the physical size of a credit card. Raspberry Pi 
runs various flavors of Linux and can perform almost all tasks that a normal desktop 
computer can do.
•
Raspberry Pi also allows interfacing sensors and actuators through the general purpose I/O 
pins. Since Raspberry Pi runs Linux operating system, it supports Python "out of the box".
IoT Physical Devices and Endpoints
Raspberry Pi
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT Physical Devices and Endpoints
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Linux on Raspberry Pi
1. Raspbian: Raspbian Linux is a Debian Wheezy port 
optimized for Raspberry Pi.
2. Arch: Arch is an Arch Linux port for AMD devices.
3. Pidora: Pidora Linux is a Fedora Linux optimized for 
Raspberry Pi.
4. RaspBMC: RaspBMC is an XBMC media-center distribution 
for Raspberry Pi.
5. OpenELEC: OpenELEC is a fast and user-friendly XBMC 
media-center distribution.
6. RISC OS: RISC OS is a very fast and compact operating 
system.
IoT Physical Devices and Endpoints
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Raspberry Pi GPIO
IoT Physical Devices and Endpoints
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Raspberry Pi Interfaces
1. Serial: The serial interface on Raspberry Pi has receive (Rx) 
and transmit (Tx) pins for communication with serial 
peripherals.
2. SPI: Serial Peripheral Interface (SPI) is a synchronous serial 
data protocol used for communicating with one or more 
peripheral devices.
3. I2C: The I2C interface pins on Raspberry Pi allow you to 
connect 
hardware 
modules. 
I2C 
interface 
allows 
synchronous data transfer with just two pins - SDA (data 
line) and SCL (clockline).
IoT Physical Devices and Endpoints
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Raspberry Pi Example:
Interfacing LED and switch with Raspberry Pi
from time import sleep 
import RPi.GPIO as GPIO 
GPIO.setmode(GPIO.BCM)
#Switch Pin 
GPIO.setup(25, GPIO.IN) 
#LED Pin 
GPIO.setup(18, GPIO.OUT) 
state=false
def toggleLED(pin): 
 
state = not state 
 
GPIO.output(pin, state)
while True: 
try: 
 
if (GPIO.input(25) == True): 
 
toggleLED(pin)
 
sleep(.01) 
 
except KeyboardInterrupt: 
 
 
exit() 
IoT Physical Devices and Endpoints
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Other Devices:
•
pcDuino
•
BeagleBone Black
•
Cubieboard
Unit III
IoT Architecture and 
Python
Cyrel Ontimare Manlises
Unit III
IoT Architecture and Python
TOPIC OBJECTIVES:
1.
To be able to  understand IoT Architecture.
2.
To be able to understand Python.
Unit III
IoT Architecture and Python
State of the Art
1. Sensors
2. Devices
3. Gateway
4. Cloud
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Unit III
IoT Architecture and Python
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Stages of IoT Architecture
Unit III
IoT Architecture and Python
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Stage 1 – Sensors/Actuators
•
Sensors collect data from the environment or object under measurement and turn it into 
useful data. Think of the specialized structures in your cell phone that detect the directional 
pull of gravity and the phone's relative position to the ―thing‖ we call the earth and 
convert it into data that your phone can use to orient the device. 
•
Actuators can also intervene to change the physical conditions that generate the data. An 
actuator might, for example, shut off a power supply, adjust an air flow valve, or move a 
robotic gripper in an assembly process. 
•
The sensing/actuating stage covers everything from legacy industrial devices to robotic 
camera systems, water level detectors, air quality sensors, accelerometers, and heart rate 
monitors. And the scope of the IoT is expanding rapidly, thanks in part to low-power 
wireless sensor network technologies and Power over Ethernet, which enable devices on a 
wired LAN to operate without the need for an A/C power source. 
Unit III
IoT Architecture and Python
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Stage 2 – The Internet Gateway
•
The data from the sensors starts in analog form. That data needs to be aggregated and 
converted into digital streams for further processing downstream. Data acquisition 
systems (DAS) perform these data aggregation and conversion functions. The DAS 
connects to the sensor network, aggregates outputs, and performs the analog-to-
digital conversion. The Internet gateway receives the aggregated and digitized data 
and routes it over Wi-Fi, wired LANs, or the Internet, to Stage 3 systems for further 
processing. Stage 2 systems often sit in close proximity to the sensors and actuators. 
•
For example, a pump might contain a half-dozen sensors and actuators that feed data 
into a data aggregation device that also digitizes the data. This device might be 
physically attached to the pump. An adjacent gateway device or server would then 
process the data and forward it to the Stage 3 or Stage 4 systems. Intelligent gateways 
can build on additional, basic gateway functionality by adding such capabilities as 
analytics, malware protection, and data management services. These systems enable 
the analysis of data streams in real time. 
Unit III
IoT Architecture and Python
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Stage 3 – Edge IT
•
Once IoT data has been digitized and aggregated, it's ready to cross into the realm of IT. 
However, the data may require further processing before it enters the data center. This is 
where edge IT systems, which perform more analysis, come into play. Edge IT processing 
systems may be located in remote offices or other edge locations, but generally these sit in 
the facility or location where the sensors reside closer to the sensors, such as in a wiring 
closet. Because IoT data can easily eat up network bandwidth and swamp your data center 
resources, it's best to have systems at the edge capable of performing analytics as a way to 
lessen the burden on core IT infrastructure. You'd also face security concerns, storage 
issues, and delays processing the data. With a staged approach, you can preprocess the 
data, generate meaningful results, and pass only those on. For example, rather than passing 
on raw vibration data for the pumps, you could aggregate and convert the data, analyze it, 
and send only projections as to when each device will fail or need service.
Unit III
IoT Architecture and Python
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Stage 4 – The data center and the Cloud
•
Data that needs more in-depth processing, and where feedback doesn't have to be 
immediate, gets forwarded to physical data center or cloud-based systems, where more 
powerful IT systems can analyze, manage, and securely store the data. It takes longer to get 
results when you wait until data reaches Stage 4, but you can execute a more in-depth 
analysis, as well as combine your sensor data with data from other sources for deeper 
insights. Stage 4 processing may take place on-premises, in the cloud, or in a hybrid cloud 
system, but the type of processing executed in this stage remains the same, regardless of 
the platform. 
Unit III
IoT Architecture and Python
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Reference Model and Architecture
•
Reference Architecture that describes essential building blocks as well as design choices to 
deal with conflicting requirements regarding functionality, performance, deployment and 
security. Interfaces should be standardized, best practices in terms of functionality and 
information usage need to be provided.
Unit III
IoT Architecture and Python
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Reference Model and Architecture
•
A Reference Architecture (RA) can be visualized as the ―Matrix that eventually gives birth 
ideally to all concrete architectures. For establishing such a Matrix, based on a strong and 
exhaustive analysis of the State of the Art, we need to envisage the superset of all possible 
functionalities, mechanisms and protocols that can be used for building such concrete 
architecture and to show how interconnections could take place between selected ones (as 
no concrete system is likely to use all of the functional possibilities).
•
As any metaphoric representation, this tree does not claim to be fully consistent in its 
depiction; it should therefore not be interpreted too strictly. On the one hand, the roots of 
this tree are spanning across a selected set of communication protocols (6LoWPAN, Zigbee, 
IPv6,…) and device technologies (sensors, actuators, tags,..) while on the other hand the 
blossoms / leaves of the tree represent the whole set of IoT applications that can be built 
from the sap (i.e., data and information) coming from the roots.
•
The trunk of the tree is of utmost importance here, as it represent the Architectural 
Reference Model (ARM).
Unit III
IoT Architecture and Python
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
The IOT-A Tree
Unit III
IoT Architecture and Python
IoT-A architectural reference model building blocks. 
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Unit III
IoT Architecture and Python
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
IoT-A architectural reference model building blocks
•
The vision summarizes the rationale for providing an architectural reference model for the 
IoT. At the same time it discusses underlying assumptions, such as motivations. It also 
discusses how the architectural reference model can be used, the methodology applied to 
the architecture modeling, and the business scenarios and stakeholders addressed.
•
The IoT Reference Architecture is the reference for building compliant IoT architectures. As 
such, it provides views and perspectives on different architectural aspects that are of 
concern to stakeholders of the IoT. 
Unit III
IoT Architecture and Python
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
• Simplifies: It helps break down complex systems so that each 
part is more understandable. 
• Clarifies: It provides additional information to precisely 
identify levels of the IoT and to establish common 
terminology.  Identifies: It identifies where specific types of 
processing is optimized across different parts of the system. 
•  Standardizes: It provides a first step in enabling vendors to 
create IoT products that work with each other. 
•  Organizes: It makes the IoT real and approachable, instead 
of simply conceptual.
Unit III
IoT Architecture and Python
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Internet of Things Reference Model
Unit III
IoT Architecture and Python
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Level 1: Physical Devices and Controllers
•
 The IoT Reference Model starts with Level 1: physical devices and controllers that 
might control multiple devices. These are the ―things‖in the IoT, and theyinclude a 
wide range of endpoint devices that send and receive information. 
•
Devices are diverse, and there are no rules about size, location, form factor, or origin. 
Unit III
IoT Architecture and Python
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Level 2 – Connectivity
• Communications and connectivity are concentrated in one 
level—Level 2. The most important function of Level 2 is 
reliable, timely information transmission. This includes 
transmissions: 
• Between devices (Level 1) and the network 
• Across networks(east-west) 
• Between the network (Level 2) and low-level information 
processing occurring at Level 3 
Unit III
IoT Architecture and Python
Level 2 – Connectivity
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Unit III
IoT Architecture and Python
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Level 3 – Edge (Fog) Computing
•
The functions of Level 3 are driven by the need to convert network data flows into 
information that is suitable for storage and higher level processing at Level 4 (data 
accumulation). This means that Level 3 activities focus on high-volume data analysis and 
transformation. 
•
A basic tenet of the IoT Reference Model is that the most intelligent system initiates 
information processing as early and as close to the edge of the network as possible. This is 
sometimes referred to as fog computing. Level 3 is where this occurs. 
Unit III
IoT Architecture and Python
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Level 3 – Edge (Fog) Computing
•
Given that data is usually submitted to the connectivity level (Level 2) networking 
equipment by devices in small units, Level 3 processing is performed on a packet-by-packet 
basis. This processing is limited, because there is only awareness of data uni nol "sessions‖ 
or ―transactions." Level 3 processing can encompass many examples, such as: 
•
Evaluation: Evaluating data for criteria as to whether it should be processed at a higher 
level 
•
Formatting: Reformatting data for consistent higher-level processing 
•
 Expanding/decoding. Handling cryptic data with additional context (such as the origin) 
•
Distillation/reduction: Reducing and/or summarizing data to minimize 
•
 the impact of data and traffic on the network and higher-level processing systems  
Assessment. Determining whether data represents a threshold or alert; this could 
include redirecting data to additional destinations. 
Unit III
IoT Architecture and Python
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Level 3 – Edge (Fog) Computing
Unit III
IoT Architecture and Python
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Level 4 – Data Accumulation
Unit III
IoT Architecture and Python
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Level 5 – Data Abstraction
Unit III
IoT Architecture and Python
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Level 5 – Data Abstraction
Information Integration 
•
GreBtes schemas and views of dBta in the manner that applications want 
•
Combines data from multiple sources, simplifying the application 
•
Filtering, selecting, projecting, and reformatting the data to serve the client applications 
•
Reconciles differences in data shape, format, semantics, access protocol, and securir/ 
Unit III
IoT Architecture and Python
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Level  6 – Application
• Level 6 is the application level, where information 
interpretation occurs. Software at the is level interacts with 
Level 5 and data at rest, so it does not have to operate at 
network speeds.
• The IoT Reference Model does not strictly define an 
application. Applications vary based on vertical markets, the 
nature of device data, and business needs. These topics are 
beyond the scope of the IoT Reference Model discussion. 
Suffice it to say that application complexity will vary widely.
Unit III
IoT Architecture and Python
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Level  6 – Application
Examples include: 
•
Mission-critical business applications, such as generalized ERP or specialized industry 
solutions Mobile applications that handle simple interactions 
•
Business intelligence reports, where the application is the BI server Analytic applications 
that interpret data for business decisions 
•
System management/con1rol center applications that control the IoT system ibelf and don't 
act on the data produced by it 
Unit III
IoT Architecture and Python
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Level  7 – Collaboration and Processes
Unit III
IoT Architecture and Python
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Level  7 – Collaboration and Processes
Unit III
IoT Architecture and Python
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Security in the IoT
Unit III
IoT Architecture and Python
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Python
• Python is a general-purpose high level programming 
language and suitable for providing a solid foundation to the 
reader in the area of cloud computing.
• Main Characteristics:
•
Multi-paradigm programming language. 
•
Python supports more than one programming paradigms including object- oriented 
programming and structured programming. 
•
Interpreted Language. 
•
Python is an interpreted language and does not require an explicit compilation step. 
•
The Python interpreter executes the program source code directly, statement by 
statement, as a processor or scripting engine does. 
•
Interactive Language 
•
Python provides an interactive mode in which the user can submit commands at the 
Python prompt and interact with the interpreter directly. 
 
Unit III
IoT Architecture and Python
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Python
Benefits
 
Unit III
IoT Architecture and Python
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Python
Set-up
 
Unit III
IoT Architecture and Python
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Python
Datatypes
1. Python Number - Integers, floating point numbers and 
complex numbers falls under Python numbers category. 
They are defined as int, float and complex class in Python. 
2. Python List - List is an ordered sequence of items. It is one 
of the most used datatype in Python and is very flexible. All 
the items in a list do not need to be of the same type. 
Declaring a list is pretty straight forward. Items separated by 
commas are enclosed within brackets []. 
 
Unit III
IoT Architecture and Python
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Python
Datatypes
3. Python Tuple - Tuple is an ordered sequences of items same 
as list. The only difference is that tuples are immutable. Tuples 
once created cannot be modified. It is defined within 
parentheses () where items are separated bycommas. 
4. Python Strings - String is sequence of Unicode characters. We 
can use single quotes or double quotes to represent strings. 
Multi-line strings can be denoted using triple quotes, ''' or """. 
 
Unit III
IoT Architecture and Python
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Python if...else Statement
• Every value in Python has a datatype. Since everything is an 
object in Python programming, data types are actually 
classes and variables are instance (object) of these classes. 
Decision making is required when we want to execute a code 
only if a certain condition is satisfied. 
• The if…elif…else statement is used in Python for decision 
making. 
Unit III
IoT Architecture and Python
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Python if Statement
Unit III
IoT Architecture and Python
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Python if...else Statement
Unit III
IoT Architecture and Python
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Python for Loop 
• The for loop in Python is used to iterate over a sequence (list, 
tuple, string) or other iterable objects. Iterating over a 
sequence is called traversal. 
Syntax of for Loop
 for val in sequence: 
 
Body of for 
• Here, val is the variable that takes the value of the item 
inside the sequence on each iteration. Loop continues until 
we reach the last item in the sequence. The body of for loop 
is separated from the rest of the code using indentation. 
Unit III
IoT Architecture and Python
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
range()
• We can generate a sequence of numbers using range() 
function. range(10) will generate numbers from 0 to 9 (10 
numbers). We can also define the start, stop and step size as 
range(start,stop,step size). step size defaults to 1 if not 
provided. 
Unit III
IoT Architecture and Python
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
while loop in Python
•
The while loop in Python is used to iterate over a block of code as long as the test 
expression (condition) is true. We generally use this loop when we don't know beforehand, 
the number of times to iterate. 
Syntax of while Loop in Python 
 
while 
 
test_expression: 
 
Body of while 
Unit III
IoT Architecture and Python
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Python Modules
• A file containing a set of functions you want to include in the 
application is called Module. 
Packages 
• We don't usually store all of our files in our computer in the 
same location. We use a well- organized hierarchy of 
directories for easier access. Similar files are kept in the same 
directory, for example, we may keep all the songs in the 
"music" directory. Analogous to this, Python has packages for 
directories and modules for files 
Unit III
IoT Architecture and Python
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Files
• File is a named location on disk to store related information. 
It is used to permanently store data in a non-volatile memory 
(e.g. hard disk). 
Python File Mode
Unit III
IoT Architecture and Python
SOURCE: Dr. M. Kalaiselvi Geetha, Professor in CSE, FEAT, Annamalai University 
                  DUNDIGAL, HYDERABAD - 500 043, INSTITUTE OF AERONAUTICAL ENGINEERING
Python File Methods 
Embedded System Design And History
Outline
• Introduction
• History
• Embedded System Design
• Embedded Microprocessor
• Embedded Operating System
• Embedded Linux Distributions
• Embedded Application
What is Embedded System?
• An embedded system is a 
special-purpose system in which 
the computer is completely 
encapsulated by the device it 
controls.
• An embedded system performs 
pre-defined tasks, usually with 
very specific requirements.
• Mobile phones, MP3 Players, 
Digital Cameras are very common 
embedded systems in our life.
What is Embedded System?
• Since the system is dedicated to a specific 
task, design engineers can optimize it and 
reduce the size and cost of the product.
• Power Constrain, Performance 
requirements.
• Embedded systems are often mass-
produced, so the cost savings may be 
multiplied by millions of items.
Outline
• Introduction
• History
• Embedded System Design
• Embedded Microprocessor
• Embedded Operating System
• Embedded Linux Distributions
• Embedded Application
History
• Apollo Guidance Computer (AGC), 1963 [1]
– The first recognizably modern embedded system.
– Developed by Charles Stark Draper at the MIT 
Instrumentation Laboratory .
– Used in real-time by astronaut pilots to collect and 
provide flight information.
– Automatically control all of the navigational functions of 
the Apollo spacecraft.
– The Apollo flight computer was the first to use integrated 
circuits (ICs).
– The computer's RAM was magnetic core memory (4K 
words) and ROM was implemented as core rope 
memory (32K words). 
Source: The Computer History Museum
History
• D-17 Guidance Computer, 1961 ~ 1966 [1]
– The first mass-produced embedded system developed 
for Minuteman missile.
– Built from discrete transistor logic and had a hard disk 
for main memory.
– When the Minuteman II went into production in 1966, the 
D-17 was replaced with a new computer that was the 
first high-volume use of integrated circuits.
– This program alone reduced prices on quad NAND gate
ICs from $1000/each to $3/each, permitting their use in 
commercial products.
History
• Intel 4004, [1]
– The first microprocessor.
– Which found its way into calculators and other small 
systems.
– Required external memory and support chips.
• 8-bit Microprocessor, 1971-1974
– 8008, 8080, 8085, 6800, 6502, Z-80, Ti, NS
– Hundred if not thousand vendors rushed into this market.
– The 6502 was used by Apple Co. to design Apple-II, 
which sparked the Personal computer era.
History
• 16-bit CPU
–
8088, 8086, 80286 Z-800. 68000 
– About 20 companies had released their products.
– Why did the 16-bit CPU not make any significant impact in 
the market?
– IBM PC Era began from 1979
• 8088 was used in PC and PC/XT, 80286 was used in the PC/AT.
• This adoption of Intel CPU plus the OS supplied by Microsoft created 
two biggest PC Giants (Monsters) rule the world up to this day.
• 80286 is used in IBM PS/2 personal computer system .
• M$ intentional persuaded the IBM to use assembly to implement the 
OS/2 so that caused a long delay of the OS/2-286 release. During that 
time, Bill Gate secretly develops the Windows to emulate the Mac’s OS.
• Single chip microcontroller (8051 MCU) series which was developed by 
Intel in 1980 for use in embedded systems .
History
• 32-bit CPU
– 68020, 80386, NS32032, Z8000, Japan TRON CPU .
– Only a handful manufacturer would be able to reach the 32-
bit CPU market. Why ?
• The era of the RISC
– the era RISC Reduced Instruction Set Computer comes. 
(RISC vs. CISC) But the battle turned out to be the 
CISC(x86)'s big victory. 
– The code density for RISC is poor compared to the CISC.
–
The large installed X86 PC software base is a big hurdle to 
the RISC machines to overcome.
History
• Simple history of RISC
– Even the RISC idea (around 1980) was rebutted by the 
computer architects during its early development.
– For at that time, most computer architects tried to enhance 
the performance of CPU by adding more complex 
instructions .
– RISC is simply against the intuition. Why RISC prevails?
– X86 vs. RISC ... This is a big question!
History
• Notable RISC CPUs
– MIPS, PPC, M88000, PA-RISC, DEC-Alpha, Clipper, ARM
– Architecture Design
• Instruction, Register set, memory model, pipelined 
architecture, Superscalar, simultaneous multithreading, 
multi-core.
– Does RISC really reduce the instruction set? 
– So what is the key to the 32-bit RISC? A Big 
design Team is needed. 
History
– Architecture is far too complex for a small 
company to handle. Compiler tool chain 
support, OS, middle ware, development kit...
– (FPAG + CPU==> NIOS-II, Microblaze, ARM 
and PPC, from Altera, Xilinx...)
– Their costs range from USD$3-4 to 30-40 or 
more. Power problem... The X86 CPU reached 
4 GHz around 2001. But no fast CPU was 
made to the market.
History
• RISC vs X86
– In the performance with application base 
game, the RICS failed miserably to the Intel’s 
X86 architecture. 
– So the RISC company had to find the 
alternative market and focused on the 
embedded system.
– The tide has been changing now, the RISC 
power player ARM strikes back. In low-power 
application the X86 is no match to the ARM.
ARM history
ARM0: Acorn Computers Ltd used 6502 (which 
powered Apple-II then) to design BBC Micro 
computer.
• ARM1 ARM 2: (Inspired by Berkley RISC project)
•
The official Acorn RISC Machine project started 
in October 1983. 
•
VLSI Technology, Inc was chosen as silicon 
partner.
•
VLSI produced the first ARM silicon on 26 April 
1985 – it worked the first time and came to be 
termed ARM1 by April 1985.
•
The first "real" production systems named ARM2 
were available the following year.
ARM History
•
 ARM Family 
ARM Architecture 
ARM Core Feature 
Cache (I/D), MMU 
Typical MIPS @ MHz
•
ARM1 ARMv1 
ARM1 
First implementation None 
•
ARM2 ARMv2 
ARM2 
ARMv2 added the MUL (multiply) instruction 
None 
4 MIPS @ 8 MHz
•
0.33 DMIPS/MHz
•
ARMv2a 
ARM250 
Integrated MEMC (MMU), Graphics and IO 
processor. ARMv2a added the SWP and SWPB (swap) instructions. 
None, 
MEMC1a 
7 MIPS @ 12 MHz
•
ARM3 ARMv2a 
ARM3 
First integrated memory cache. 4 KB unified 
12 MIPS @ 25 MHz
•
0.50 DMIPS/MHz
•
ARM6 ARMv3 
ARM60 
ARMv3 first to support 32-bit memory address 
space (previously 26-bit) 
None 
10 MIPS @ 12 MHz
•
ARM7TDMI 
ARMv4T 
ARM7TDMI(-S) 
3-stage pipeline, Thumb 
none 
15 MIPS @ 16.8 MHz
•
63 DMIPS @ 70 MHz
•
ARM9TDMI 
ARMv4T 
ARM9TDMI 
5-stage pipeline, Thumb 
none 
ARM Key Architecture
The ARM architecture includes the following RISC 
features:
• Load/store architecture.
• No support for misaligned memory accesses (now 
supported in ARMv6 cores, with some exceptions 
related to load/store multiple word instructions).
• Uniform 16 × 32-bit register file.
• Fixed instruction width of 32 bits to ease decoding 
and pipelining, at the cost of decreased code 
density. Later, the Thumb instruction set 
increased code density. Now Thumb-2 ISA
• Mostly single-cycle execution.
ARM architecture 
To compensate for the simpler design, compared with 
contemporary processors like the Intel 80286 and Motorola 
68020, some additional design features were used:
•
Conditional execution of most instructions, reducing branch 
overhead and compensating for the lack of a branch 
predictor.
•
Arithmetic instructions alter condition codes only when 
desired.
•
32-bit barrel shifter which can be used without performance 
penalty with most arithmetic instructions and address 
calculations.
•
Powerful indexed addressing modes.
•
A link register for fast leaf function calls.
•
Simple, but fast, 2-priority-level interrupt subsystem with 
banked register banks. 
• ARM Cortex 
•
Application Profile-A8, A9, A15, A7
• Real-time Profile Cortex-R4 
• MCU profile M3, M4 (Low power of M : 
NXP's Cortext-M3 0.05mW/MHz, M4 
0.06mW/Mhz.  NXP-LPC430 ==> M0 + M4 
running at 150MHz consumes only 9mW)
A glance of Cortex A8 
•
Key features of the Cortex-A8 core are:
•
* Frequency from 600 MHz to 1 GHz and above
•
* Superscalar dual-issue microarchitecture 13-stage 
superscalar pipeline
•
* NEON SIMD instruction set extension (optional)
•
* VFPv3 Floating Point Unit (optional)
•
* Thumb-2 instruction set encoding
•
* Jazelle RCT
•
* Advanced branch prediction unit with >95% accuracy
•
* Integrated level 2 Cache (0-4 MB)
•
* 2.0 DMIPS / MHz
• VFP and  (for floating point)
• NEON (SIMD) Instruction Set. (For 
Multimedia applications)
• Amazon Kindle: FreeScale i.MX508, 
Cortex-A8 
•
Xilinx's Zynq : Dual core A9 MPcore(hard 
core CPU) + FPGA (235K--30K Logic 
cells), USB, Gbps ethernet, 10.315 Gbps 
serial
ARM Entering the Server Market
• SAN JOSE, Calif. -- Startup Calxeda (Austin) has 
released a few details about its unannounced 
ARM-based processor aimed at low power 
servers.
• Calxeda's initial reference design will be based on 
a quad-core Cortex A9 SoC that consumes 5W 
including associated DRAM. The chip includes a 
fabric that acts as an interconnect to other 
processors, enabling OEMs to pack as many as 
120 SoCs in a 2U-sized chassis.
• (Rackmount 19 inches wide 1U 1.75 inches)
ARM Entering the Server Market
• SAN JOSE, Calif. – Marvell will try to thrust ARM 
into servers and networking gear with a 1.6 GHz 
quad-core Cortex A9 chip debuting at the ARM 
Technology Conference. The Armada XP aims 
at a broad range of systems from low power Web 
servers for business to network-attached storage 
and media servers for the digital home.
• The Armada XP delivers up to 16,600 Dhrystone 
MIPS at 10W. It includes up to 2 Mbytes L2 cache 
and supports a 64-bit interface to DDR2/3 
memory running at up to 800 MHz. 
Outline
• Introduction
• History
• Embedded System Design
• Embedded Microprocessor
• Embedded Operating System
• Embedded Linux Distributions
• Embedded Application
Embedded System Design
• Components of embedded system:
– Hardware
• Processor, memory, ASIC, controllers, peripherals…
– Firmware/software
• Boot loader, embedded OS, device drivers, applications…
• Design and Development Skills:
– HDL: Verilog, VHDL …
– I/O, analog and digital interfacing, peripherals …
– Development kits: Compiler, linker …
– Firmware design: Assembly and Low-level C language
– Device driver design
– Embedded operating system design or porting
– System programming: System calls, IPC, Socket …
– Application software design: JAVA, C++ …
• Example: Digital camera hardware block diagram
Embedded System Design
Processor
Core
Memory
Interface
PIO
Interface
USB
Controller
ADC
DSP
Image
De/Encoder
SDRAM
SRAM
Flash
SPI
LCD
Controller
RTC
SoC
Embedded System Design
• Example: Digital camera firmware/software
Low level initializing code (Boot loader)
Device drivers: LCD, Sensor, SD Card …
Embedded OS
GUI
Image Capturer
Image Processing
System Configure
Several
Tasks
File Manager
Embedded System Design Issues
• Cost and Performance
– Lowering the cost affects the speed of embedded 
system.
– Most often speed issue doesn’t matter and one achieves 
the task at lower cost.
– Simplifying the hardware allows cost reduction.
• Specifications and User Constraints
– Specifications define that what task is to be achieved.
– The constraints help the designer to select appropriate 
hardware and software setup to develop an embedded 
system.
The selection of an embedded system depends 
upon the requirement specifications. 
Embedded System Design Issues
– CPU Architecture
• ARM or MIPS or … ?
– Storage Size and Speed
• SDRAM or DDR ?
• RAM, ROM, Flash 
memory size ?
– Interfaces
• PIO or RS232 or …?
• Touch screen or keypad ?
– Development kits
• GNU tools or others ?
– Embedded OS
• Real-time or not?
• Kernel size ?
• Multi-task supported ?
• Easy to port ?
– Embedded Applications
• Implement with C, C++ or 
JAVA  … ?
• GUI: Microwindows or 
MiniGUI or … ?
•
Selection of hardware and software of an 
embedded system
Embedded Hardware Design
• Hardware Design Technology
– System on a Chip (SoC)
• Integrating all components of a computer or other 
electronic system into a single chip.
– System on a Programmable Chip (SoPC)
• SoPC is a family of mixed-signal arrays made by 
Cypress Semiconductor, featuring a microcontroller 
and integrated analog and digital peripherals.
Embedded Hardware Design
Figure: SoC Design Flow (Top-half)
Source: Wikipedia, the free encyclopedia [1]
Embedded Hardware Design
Figure: SoC Design Flow (Bottom-half)
Source: Wikipedia, the free encyclopedia [1]
Embedded Hardware Design
• Hardware Description Language (HDL)
– VHDL and Verilog
• The two most widely-used and well-supported HDL 
varieties used in industry.
– Others include
• ABEL (Advanced Boolean Expression Language)
• AHDL (Altera HDL, a proprietary language from Altera)
• JHDL (based on Java)
• Lava (based on Haskell)
• MyHDL (based on Python)
• PALASM
• RHDL (based on Ruby) 
Embedded Hardware Design
• Design, Synthesis Tools
– Altera
• Max-plus II, Quartus II, SoPC Builder
– Xilinx
• ISE
– Synplicity
• Synplify
• Simulation Tools
– Model Technology
• ModelSim
Embedded Software Design
• Software Architecture Definition
– This is the first stage of embedded software design.
– Here the software team understands the system that is 
being designed.
– The team also reviews at the proposed hardware 
architecture and develops a very basic software 
architecture.
– This architecture definition will be further refined in co-
design.
• The complexity of embedded software depends 
on the application of your system.
Embedded Software Design
• Common types of embedded software
– Single-tasking or multi-tasking
• Only one task needs to be performed at one period 
of time →Single-tasking
• Several tasks need to be performed at one period of 
time →Multi-tasking
Task A
Task B
time
Task A
Task B
time
Task C
Task A
Task C
A finished
B finished
A finished
B finished
C finished
Task B
Embedded Software Design
– Single-tasking example
• ATM
– Multi-tasking example
• Multimedia phone
time
time
… …
Show account info
Withdraw money
Transfer accounts
Play MP3
JAVA Game
Embedded Software Design
– Non-real-time system or real-time system
• Non-real-time system
– A non-real-time system is one for which there is no 
deadline, even if fast response or high performance is 
desired or even preferred.
• Real-time system
– Hardware and software systems which are subject to 
a "real-time constraint" — i.e. operational deadlines 
from event to system response.
– A real-time system may be one where its application 
can be considered (within context) to be mission 
critical. 
Embedded Software Design
– Real-time system example
• Anti-lock Brakes System (ABS)
– A system on motor vehicles which prevents the 
wheels from locking while braking.
– Real-time constraint
» The short time in which the brakes must be released to 
prevent the wheel from locking.
– Real-time computations are not completed in 
the time-period after the event before the 
deadline relative to the event →have failed.
Embedded Software Design
– Hard and Soft real-time system
• Hard real-time system
– The correctness of an operation depends not only 
upon the logical correctness of the operation but also 
upon the time at which it is performed.
– Hard real-time systems are typically found interacting 
at a low level with physical hardware, in embedded 
systems.
– Example: Car Engine Control System
» A delayed signal may cause engine failure or damage. 
– Other examples
» Nuclear power stations
» Car airbags
Embedded Software Design
• Soft real-time system
– Soft real-time systems are typically those used where 
there is some issue of concurrent access and the 
need to keep a number of connected systems up to 
date with changing situations.
– Example1: The flight plans management system
» The software that maintains and updates the flight plans 
for commercial airliners.
» These can operate to a latency of seconds.
– Example2: Live audio-video systems
» Violation of constraints results in degraded quality, but 
the system can continue to operate. 
Embedded Software Design
– It is important to note that 
• Hard versus soft real-time does not necessarily 
relate to the length of time available.
• A processor does not turn on cooling within 15 
minutes 
→machine may overheat (hard real-time).
• A network interface card is not read within a fraction 
of a second 
→may lose buffered data but the data can be resent 
over the network if needed (soft real-time).
• Real-time ≠ high performance
– For Anti-lock Brakes System
» Has been designed to meet its required deadlines.
» No further performance gains are necessary. 
Embedded Software Design
• Development Kits
– GNU Tools
• Free software, easy to get for developing.
(Free as in Freedom)
• Abundant in documents, manuals and lots of developing 
societies, easy to learn.
• Fully support the GNU-based software such as Linux, 
Linux-based software, simplify the porting process.
• Multiple platform supported, such as x86, ARM, MIPS, 
NIOS, PowerPC …
• Operate in command line mode.
• Basic tools
– C/C++ Compiler: gcc, g++
– Assembler: as
– Linker: ld
– Debugger: gdb
– Others: objcopy, objdump, nm, ar, strip, ranlib …
Embedded Software Design
– Integrated Development Environment (By ARM’s example)
• ARM Software Development Tools (ARM SDT)
– Provided by ARM company.
– Basic tools
» C/C++/THUMB Compiler: armcc, tcc
» Assembler: armasm
» Linker: armlink
» Debugger: armsd
– ADS is the newer version of SDT.
• ARM Developer Suite (ADS) [2]
– An Integrated Development Environment for Windows, Linux 
and Solaris.
– GUI development environment and debugger.
– Support for families of processors including ARM7, ARM9, 
ARM9E, ARM10, StrongARM and Intel XScale.
– Real-time Debug and Trace support.
– On-line documentation.
Embedded Software Design
• Software Porting
– Porting is often a necessary process of designing a 
complex embedded system.
– What kind of software can we port from existing 
software ?
• Boot loader →U-Boot, LILO …
• Embedded OS →uClinux, uCOS-II …
• Applications →mplayer, microwindows
– Software selection issues for porting
• Software complexity ?
• Software is well-ported ?
• What is the development tool that the software based on ?
Embedded Software Design
– Example: U-Boot (The Universal Boot Loader)
• A GPL'ed cross-platform boot loader shepherded 
by project leader Wolfgang Denk.
• Supports for hundreds of embedded boards and a 
wide variety of CPUs including PowerPC, ARM, 
MIPS, NIOS, and x86 ...etc.
• Easily configure to strike the right balance between a 
rich feature set and a small binary footprint.
• Allowing you to focus on the core of your embedded 
application.
• Can easily add support for new hardware or add a 
special feature in U-Boot.
Hardware/Software Co-Design [3]
• Current methods for designing embedded 
systems require to specify and design hardware 
and software separately.
• Designers often strive to make everything fit in 
software, and off-load only some parts of the 
design to hardware to meet timing constraints.
• The problems with these design methods are:
– Lack of a unified hardware-software representation
• Leads to difficulties in verifying the entire system.
– A priori definition of partitions
• Leads to sub-optimal designs.
– Lack of a well-defined design flow
• Makes specification revision difficult, and directly impacts 
time-to-market. 
Hardware/Software Co-Design
• Hardware/Software co-design can be 
defined as the cooperative design of 
hardware and software.
• Co-design research deals with the problem 
of designing heterogeneous systems.
• One of the goals of co-design is to shorten 
the time-to-market while reducing the 
design effort and costs of the designed 
products.
Hardware/Software Co-Design
Figure: The design flow of the 
general co-design
Source: [4]
Outline
• Introduction
• History
• Embedded System Design
• Embedded Microprocessor
• Embedded Operating System
• Embedded Linux Distributions
• Embedded Application
Embedded Microprocessor
• The evolution of microprocessors has 
been known to follow Moore's Law when it 
comes to steadily increasing performance 
over the years.
Moore’s Law [1]
This law suggests that the complexity 
of an integrated circuit, with respect to 
minimum component cost, doubles 
every 24 months.
Embedded Microprocessor
Figure: Moore’s Law
Source: [1]
Embedded Microprocessor
• There are many different CPU 
architectures used in embedded designs 
such as ARM, MIPS, Coldfire/68k, 
PowerPC, X86, PIC, 8051, Atmel AVR etc.
• For more complex applications, 8/16-bit 
microprocessors are no longer suitable for 
the system because of the requirements of 
performance and functionalities.
Embedded Microprocessor
• RISC (Reduced Instruction Set Computer)
– In the mid-1980s to early-1990s, a crop of new 
high-performance RISC microprocessors 
appeared.
– Some companies have attacked niches in the 
market, notably ARM, originally intended for 
home computer use but since focused at the 
embedded processor market.
– Today RISC designs based on the MIPS, ARM 
or PowerPC core power the vast majority of 
computing devices.
Embedded Microprocessor
• ARM (Advanced RISC Machine)
– A 32-bit RISC processor architecture that is widely used 
in a number of embedded designs.
– The ARM family accounts for over 75% of all 32-bit 
embedded CPUs.
– Can be found in all corners of consumer electronics from 
portable devices (PDAs, Mobile phones) to computer 
peripherals (Hard drives, desktop routers).
Embedded Microprocessor
•
ARM7 & Cortex Cores [1]
Embedded Microprocessor
• The ARM architecture includes the following RISC 
features
– Load/store architecture.
– No support for misaligned memory accesses 
(now supported in v6 Arm cores).
– Orthogonal instruction set.
– Large 16 × 32-bit register file.
– Fixed opcode width of 32 bits to ease decoding 
and pipelining, at the cost of decreased code 
density.
– Mostly single-cycle execution.
Embedded Microprocessor
• Power consumption:          
CPU                Power W      Clock /MHz
– ARM7TDMI:              < 0.25                 60 -110
– ARM7TDMI-S:          < 0.4                       >50
– ARM9TDMI:                 0.3                    167 - 220
– ARM1020E:               ~0.85                 200 - 400
– IXP (XScale):               1.2                        533
– Inter 486 cpu:               10                         50
– CortexA9Singlecore:    0.4                        830
– CortexA9Dualcore:   1.9~0.5               2000-800
Embedded Microprocessor
• MIPS (Microprocessor without Interlocked 
Pipeline Stages)
– A RISC microprocessor architecture developed 
by MIPS Technologies.
– MIPS designs are used in 
• SGI’s computer product line
• Windows CE devices
• Cisco routers
• Video game consoles (Nintendo 64, Sony PS, PS2 
and PS Portable)
• Many embedded systems
Embedded Microprocessor
•
MIPS CPU Family [1]
Embedded Microprocessor
• PowerPC
– A RISC microprocessor architecture created by 
the 1991 Apple–IBM–Motorola alliance, known 
as AIM.
– Originally intended for personal computers, 
PowerPC CPUs have since become popular 
embedded and high-performance processors 
as well.
IBM PowerPC 601 
IBM PowerPC 604e 200 MHz
Embedded Microprocessor
• PowerPC design features
– The PowerPC is designed along RISC 
principles, and allows for a superscalar 
implementation.
– Versions of the design exist in both 32-bit and 
64-bit implementations.
– Starting with the basic POWER specification, 
the PowerPC added support for operations in 
both big-endian and little-endian modes.
Embedded Microprocessor
• Embedded PowerPC [1]
– IBM
• 403: MMU added in most advanced version 403GCX 
• 405: MMU, Ethernet, serial, PCI, SRAM, SDRAM
• 440xx: 440EP, 440GP, 440GX
– Motorola (now Freescale)
• MPC860/8xx (PowerQUICC):
networking & telecomm card controllers
• MPC5200/5200B (603e core):
automotive & industrial controllers 
• MPC8260/82xx (PowerQUICC II, a 603 core): 
networking & telecomm system controllers with high-
capacity on-chip switched bus 
Embedded Microprocessor
• Embedded processor preference trends [6]
Outline
• Introduction
• History
• Embedded System Design
• Embedded Microprocessor
• Embedded Operating System
• Embedded Linux Distributions
• Embedded Application
Embedded Operating System
• Embedded operation systems
– Symbian OS
– Window CE
– uC/OS-II
– QNX
– eCos
– Android
– Embedded Linux
• Most of applications basing on Embedded Linux 
except special applications .
Embedded Operating System
• Embedded Linux [1]
– Embedded Linux refers to the use of the Linux in 
embedded systems such as cell phones, PDA, media 
player handsets, and other consumer electronics 
devices.
– Embedded Linux has these advantages compared to 
other embedded OS:
• Open source 
• Small footprint
• No royalty costs 
• Mature and stable (over ten years of age and used in many 
devices) 
• Well supported 
Embedded Operating System
– Embedded Linux also provides the following 
supports besides multitasking, memory 
protection, IPC …etc
• File systems
– Ext2, Ext3, JFFS, JFFS2, FAT, NTFS …
• Networking
– TCP/IP, Bridging, Routing, WLAN, QoS …
• Device drivers 
– USB, IEEE1394, SCSI, PCI, Graphics …
• GUI
– Microwindows, MiniGUI, Qt Embedded …
• … etc
Embedded Operating System
– Linux is a real-time system ?
• The generic Linux 2.6 kernel is not yet a true real-time 
operating system.
• Linux 2.6 is more responsive than 2.4
– Linux 2.6 uses a preemptible kernel 
– The algorithm used for scheduling has been made more 
efficient in Linux 2.6
• True real-time Linux
– RTLinux, Montavista real-time solution …
Comparison of real-time performance [8]
Embedded Operating System
– Embedded Linux devices
• Mobile phones
– Motorola A728, A760, E680i …
– Panasonic P901iTV, P902i …
– Samsung SGH-i858, SCH-i519 …
• PDA, Handheld devices
– Sharp SL-6000, SL-A300 …
– Nokia 770 Internet Tablet …
– Compaq iPAQ …
• Audio/video entertainment devices
– D-Link DSM-320
– Haier/Freescale UWB media server 
– Motorola DCT5000 set-top box 
• … etc
Embedded Operating System
• Embedded systems survey: Operating systems 
up for grabs. [9]
– Who influenced the choice of OS?
Embedded Operating System
– What type of OS? 
Embedded Operating System
– Reasons for not choosing a commercial OS 
Embedded Operating System
– Commercial OS factors 
Embedded Operating System
– OS for next project 
Embedded Operating System
– Interest in Linux 
Embedded Operating System
– Reasons for considering Linux 
Embedded Operating System
– Reasons for not considering Linux 
Embedded Operating System
– Current commercial OS 
Embedded Operating System
– Commercial OS respondents would consider 
Outline
• Introduction
• History
• Embedded System Design
• Embedded Microprocessor
• Embedded Operating System
• Embedded Linux Distributions
• Embedded Application
Embedded Linux Distributions
• Commercial Distributions [10]
– AMIRIX
• Derived from standard, open source Debian GNU/Linux
• Can be used in such things as Internet infrastructure, 
consumer devices, retail business products, and 
transportation systems.
• Benefits:
– Fully optimized, tailored support
– Truly embedded
» Flash based, diskless operation 
» Headless support 
» Small footprint 
– Native and cross development host support 
– Comprehensive, user-friendly manual to get you up and 
running quickly 
Embedded Linux Distributions
– Lineo Embedix
• Supports a wide range of CPUs with and without 
MMUs, including X86, PowerPC, ARM, MIPS, and 
more.
• Ease your complete product development and 
release cycle, giving you the ability to spend your 
time on your product, not worrying about the OS.
• Lineo Embedix provides
– Very high performance hard real-time 
– Multi-processor (DSPs, 16 bit, 32 bit, and non-
heterogeneous architectures) support 
– Native support for Legacy RTOS APIs 
– Smart Handheld Device solution stacks 
– Digital TV solution stacks (coming soon!)
Embedded Linux Distributions
– LynuxWorks BlueCat
• BlueCat Linux from LynuxWorks is an enhanced 
implementation of the Linux model, made viable for 
use in a wide range of embedded systems. 
• BlueCat Linux advantages
– Single, accountable source for embedded Linux-
inherently stable and supportable Linux environment.
– Immediate productivity-includes powerful commercial-
grade tools and support package for developing and 
deploying embedded Linux.
– Unrivaled expertise-15+ years of expertise in UNIX 
model-based embedded operating systems.
Embedded Linux Distributions
– MontaVista Hard Hat Linux
• MontaVista Linux is the leading embedded Linux 
development platform.
• Designed for the scalability, dependability and 
performance required of well-designed embedded 
applications.
• Supported platform: x86/IA-32, PowerPC, 
StrongARM, XScale, MIPS, SH, ARM, and other 
microprocessor architectures.
• Includes scaling and configuration tools
– Let developers right size Linux kernel and filesystems 
to suit their memory footprint.
• Includes support for various networking and routing 
protocols.
Embedded Linux Distributions
– Red Hat Embedded Linux
• Red Hat Embedded Linux Developer Suite
– A collection of Tools and Runtime Technologies.
– Enables the creation, deployment and testing of target 
software components for devices. 
– Accelerate development cycles and improve product 
quality.
– Fine-grain configuration of operating system 
components →RPM technology.
– Stay flexible.
• Red Hat has multiple service packages to choose 
from for the many stages of development.
Embedded Linux Distributions
• Open Source Distributions [10]
– Embedded Debian
• This project is to make Debian GNU/Linux a 
mainstream choice for embedded projects.
• Embedded Debian tries to strip Debian down to be a 
much smaller system whilst keeping all the good 
things.
• The 'embedded' hardware can be anything from a 
full-blown PC to a MMU-less thing with a few MB of 
RAM and flash. 
Embedded Linux Distributions
– PeeWeeLinux 
• A small Linux distribution aimed at embedded 
devices. 
• Main features
– Ease of use 
– Menu driven development environment 
– Sources are available 
– Package maintenance using rpm 
– Ideal for embedded applications 
– Suitable for building single floppy systems 
– XFree86 support 
– Kernel supports USB, PCMCIA, and M-Systems Disk-
On-Chip 
Embedded Linux Distributions
– uClinux
• A derivative of Linux specifically for microprocessors 
which do NOT provide Memory Management Units 
(MMUs). 
• uClinux was first ported to the Motorola MC68328 
DragonBall Integrated Microprocessor.
• Ported Microcontrollers and Microprocessors 
– Motorola DragonBall (M68EZ328), M68328, 
M68EN322, ColdFire, QUICC 
– ARM7TDMI
– Atari 68k
– Axis ETRAX 
– Altera NIOS/NIOS-II
– … and more all the time!
Embedded Linux Distributions
• uClinux Features
– Multitasking can be tricky 
→non-MMU platform
– Most of the source code for the kernel have been 
rewritten 
→uClinux kernel is much smaller than the original 
Linux 2.0 kernel.
– Retaining the main advantages of the Linux 
→stability, superior network capability, and excellent 
file system support. 
– Key features
» Common Linux API
» uCkernel < 512 KB 
» uCkernel + tools < 900 KB 
Embedded Linux Distributions
– ARM Linux
• A port of the successful Linux Kernel to ARM 
processor based machines, lead mainly by Russell 
King.
• ARM Linux is under almost constant development by 
various people and organizations around the world.
• The ARM Linux kernel is being ported, or has been 
ported to more than 500 different machine variations.
Embedded Linux Distributions
• Real-time Distributions [10]
– RTLinux
• A "hard real-time" mini operating system.
• Runs Linux as its lowest priority execution thread.
• The Linux thread is made completely preemptible.
• Real-time threads and interrupt handlers are never 
delayed by non-real-time operations.
• The latest version of RTLinux supports user-level 
real-time programming.
Embedded Linux Distributions
– RTAI (Real Time Application Interface)
• A comprehensive Real Time Application Interface for 
Linux →Not an operating system.
• Usable both for uniprocessors (UP) and for 
symmetric multi processors (SMP).
• Several architectures are supported
– x86 (with and without FPU and TSC)
– x86_64 (beta)
– PowerPC (recovering)
– ARM (StrongARM; ARM7: clps711x-family, Cirrus 
Logic EP7xxx, CS89712, PXA25x)
• RTAI is very much module oriented. 
• To use RTAI, you have to load the modules that 
implement whatever RTAI capabilities you need.
Outline
• Introduction
• History
• Embedded System Design
• Embedded Microprocessor
• Embedded Operating System
• Embedded Linux Distributions
• Embedded Application
Embedded Application
• OBS System
– The Ocean Bottom Seismometer is a self contained 
data-acquisition system which free falls to the ocean 
floor and records seismic data generated by 
earthquakes .
– Designed by Embedded System Lab.
• Data acquisition and logging system
• Time-base and GPS synchronization system
• OBS release system
• VHF and Flash light system
Embedded Application
• SoPC based Automatic Vision Detection and Location
– The system uses the FPGA board with SoPC as 
development platform to develop automatic detection and 
location system. The board can integrate video input and 
output, detection and location functions in a single FPGA 
chip.
References
1.
Wikipedia, the free encyclopedia
2.
ARM Developer Suite
3.
Hardware/Software Codesign Group
4.
Hardware/Software Codesign
5.
電子工程專輯,關注嵌入式系統的發展動力
6.
LinuxDevices.com, Snapshot of the embedded Linux market --
May, 2006 
7.
Micrium.com, uCOS-II
8.
LinuxDevices.com, Linux 2.6: A Breakthrough for Embedded 
Systems
9.
Embedded.com, Embedded systems survey: Operating systems 
up for grabs
10.
LinuxDevices.com, Embedded Linux Distributions Quick 
Reference Guide
11.
Linux Journal, uClinux for Linux programmers
12.
Linux Device Driver, 3rd Edition, O'Reilly
13.
Embedded.com, Linux's Future in the Embedded Systems 
Market
Thank You!
